课程:MongoDB
进度:day1
姓名:王丹波
邮箱:g-wangdb@tedu.cn


一. 关系数据库回顾
1. 数据管理阶段
  1)手工管理阶段
    只能管理少量的, 简单的数据
	数据不能共享
	
  2)文件管理阶段
    数据可以共享
	数据可持久化保存
	缺点:数据联系性弱, 不一致,不完整
	     文件访问速度慢
		 
  3)数据库管理阶段	
    数据能共享,可持久化存储
    比较强的一致性,完整性,正确性
    安全性,可靠性的保证(备份,恢复)
    科学,高效管理(增删改查)
    性能优化工具,策略
	开发语言接口
	友好的UI(User Interface)
	
2. 数据库相关的几个概念
  1)数据: 计算机中记录的一组信息
  2)数据结构: 数据的关系, 数组的组织方式
  3)数据库: 数据集中管理的仓库
  4)数据库管理系统(DBMS): 专门用于数据管理
    的软件系统
  5)数据库系统:数据库软硬件,DBA,用户,应用
    程序
	
3. 关系数据库重要的概念
  1)关系模型: 关系(二维表)来表达数据以及数据
    之间的联系
  2)实体: 现实中可以区分的事物
  3)属性: 实体的数据特征
  3)键(Key): 能够唯一区分某个实体的属性
  4)主键(Primary Key): 关系中逻辑上唯一
    区分一个实体的键(非空,唯一)
  5)索引: 提交查询效率一种技术手段  
    通过避免全表扫描  
	索引会降低增删改的效率
  6)约束: 数据必须遵循的规则
    非空, 唯一, 默认值, 自增长, 外键
  7)子查询: 一个查询中嵌套另一个查询
  8)连接查询: 从多个表查询, 查询结果是一个
    数据集(内连接, 左连接, 右连接)
  9)数据库事务: 一组操作,要么全都成功,
    要么全都不成功
	原子性, 一致性, 隔离性, 持久性
	
4. 结构化数据和非结构化数据
  1) 结构化数据
    - 整齐, 规整
	- 每一笔数据具有相同的属性
	- 同一个属性类型,长度是一致的
  2) 非结构化数据
    - 不规则, 没有预定的数据模型
	- 不方便使用二维表来存储,表达
	- 办公文档,网页,图片,视频,音频,文字
	
5. 关系型的特点
  1) 优点
    - 结构概念简单, 二维表来表示数据/数据联系
	- 数据一致性,完整性好
	- 技术成熟, 有统一标准
  2) 缺点
    - 性能瓶颈
	- 扩展性较差
	- 存储非结构化数据不方便
	
6. 非关系型数据库(NoSQL, Not Only SQL)
  1) 什么是NoSQL: 采用非关系模型, 数据存储不是
     采用二维表的方式  
	 
  2) NoSQL数据模型
    - 键值对(key-value): Redis
	- 列存储型: HBase
	- 文档型: MongoDB
	- 图形数据库: 使用较少,暂无典型示例
	
  3) 非关系型数据库特点
    - 优点
	  高并发, 读写能力强
	  扩展性好
	  弱化了数据结构
	  降低了数据的一致性
	- 缺点
	  通用性较差
	  操作相对冗长, 容易出错,容易混乱
	  有的缺少join, 外键, 事务等支持
	  技术成熟度不如关系型数据库
	  
  4)什么情况下选择NoSQL
    - 对数据一致性要求较低
	- 需要处理海量并发
	- 作为临时数据库存储服务器
	- 方便构建非关系模型
	
三. MongoDB概述
1. MongoDB(非关系型, 文档型)
  1)开发语言:C++
  2)支持丰富的增删改查
    最像关系数据库的非关系数据库
  3)支持丰富的数据类型
  4)支持主流的编程语言接口
  5)使用方便, 便于扩展和部署
  6)技术相对成熟

2. 安装
  1)Ubuntu下自动安装
    sudo apt-get install mongodb
  2)重要目录和配置文件
    - 默认安装位置: /var/lib/mongodb
	- 配置文件: /etc/mongodb.conf
	- 命令集: /usr/bin 或 /usr/local/bin
  3) 手工安装
    - 下载包,根据包格式采用相应的安装
	- 添加环境变量
	  PATH=$PATH:/opt/mongodb/bin
	  export PATH
	  启动mongoDB: 
	    ./mongod --dbpath=/usr/mongo_data 
  
  4)查看服务
    - 查看端口: netstat -an | grep 27017
	- 通过脚本: /etc/init.d/mongo status

3. MongoDB基本命令
  1) 启动并设置数据存储路径
     mongod --dbpath 目录
	 
	 e.g.
	 mongod --dbpath /var/mongo_data
	 
  2) 设置监听端口
     mongod --port 27019
	 
  3) 登录Mongo Shell
     - mongo: 默认登录到本机服务器
	 - 带参数的登录: mongo [ip:port][/dbname]
	  
  	   e.g. 登录到本地bank库
	   mongo 127.0.0.1:27017/bank
	   
	   e.g. 登录到远程服务器bank库
	   mongo 192.168.1.5/bank -u xxx -p xxxx
	   
  4) 退出Mongo Shell
     - exit
	 - quit()
	 - ctrl + D
	 
  5) 查看服务
     /etc/init.d/mongo [status|start|stop]
	 
4. MongoDB数据库结构
   键值对 --> 文档 --> 集合 --> 库
   
5. 关系-非关系数据库概念对照
   名称			关系数据库		MongoDB
   ----------------------------------------
   数据库		database		database
   表			table			collection(集合)
   行(记录)		row				document(文档)
   列(属性)		column			field(域)
   索引			index			index
   主键			Primary Key		Primary Key
   
四. MongoDB的操作
1. 库操作
  1)创建库: use databaseName
     说明:如果该库不存在,则创建(实际写入数据时才创建)
  2)查看库: show dbs
     admin: 内置库, 管理员用户库
	 local: 存放本地服务器的信息
	        该库的内容不会在服务器分片
			之间进行复制
	 config:保存分片信息
	 
  3)库命名的规则
    - 使用utf-8字符
	- 库名中不能有空格,点,/,\,'\0'字符
	- 长度不超过64字节
	- 不能和系统库重名
	
  4)删除库!!!!!!!
    db.dropDatabase()   # 先进入某个库

2. 数据备份/恢复
  1)备份: mongodump -h 主机 -d 库名 -o 目录
    
	e.g. 把本地服务器bank库导出到databak目录下
    mongodump -h localhost -d bank -o ./databak/
	
  2)恢复: mongorestore -h 主机:端口 -d 库名 目录
    e.g. 从./databak/bank目录下恢复bank库的数据
	mongorestore -h localhost:27017 
	             -d bank ./databak/bank
				 
  课堂练习: 创建库, 备份库, 恢复库操作
  第一步: 登录,创建库,插入数据
    mongo
	use bank
	db.acct.insert({name:"Jerry"})
  第二步: 退出登录
    exit
  第三步: 备份bank库
    mongodump -h localhost -d bank -o ./databak/
  第四步: 删除原库,并退出
    mongo
	use bank
	db.dropDatabase()
  第五步: 恢复	
    mongorestore -h localhost:27017 
	             -d bank ./databak/bank/				 
  注意: 每一步操作,核实成功以后,再进行下一步
  
  3)数据库监测: mongostat 
    insert,query,update,delete: 每秒执行的增删改查的次数
    command: 每秒运行的命令次数
    flushes: 每秒中刷新缓存的次数
	vsize: 虚拟内存的使用量
	res: 物理内存的使用量
	
  4)监测读写时长: mongotop
    ns: 数据集合
	total: 总时长
	read: 读时长
	write: 写时长
	
五. 集合概念及操作
1. 什么是集合
  1)文档组, 对应关系数据库中表(table)
    主要存放同一类实体数据
	库中包含多个集合,集合中包含多个文档	
  2)集合没有特定的数据结构, 每条数据可能包含
    不同的域, 每个同名称的域可能类型不一样
  3)当在集合插入数据时, 集合被自动创建
  
2. 集合创建
  1)使用命令: db.createCollection(name)
    e.g. 创建名称为cust(客户)的集合
    use bank
	db.createCollection("cust")
  2)直接向集合插入数据,集合被自动创建
    db.cust.insert({name:"Jerry"})
  3)集合命名规范
    - 不能使用空字符串
	- 不能含有'\0'
	- 不能以system.开头, 这是系统保留集合前缀
	- 不能含有保留字符, 不能包含$符号
	
3. 删除集合, 重命名集合
  1)删除: db.collectionName.drop()
    e.g. 删除cust集合
	db.cust.drop()
	
  2)重命名: 
    db.collectionName.renameCollection(新名称)
	
	e.g. 将cust集合重命名为customer
	db.cust.renameCollection("customer")
  
六. 文档(数据)操作(重点)
1. 文档
  1)概念: MongoDB中构成集合的基本单元,
    一个文档存储一笔数据(和记录/行对应).例如:
	{
		acct_no: "622345000001", 
		acct_name: "张大大",
		acct_type: 1,
		balance: 5000.34
	}
	
  2)文档和字典的区别
    - 文档中的键值对是有序的
	- MongoDB中大小写敏感
	- MongoDB中,文档不能有重复的key
	- MongoDB中,文档的key要求是utf-8字符
  
  3)文档存储格式:BSON(Binary JSON)
    - MongoDB存储文档一种格式
	- 理解成二进制的JSON
	- 存储效率高, 可读性好, 轻量级等优点

2. 文档操作
  1)插入
    示例1: 插入单笔
	db.acct.insert({
		acct_no:"622345000001",
		acct_name:"Jerry",
		acct_type:1,
		balance:1234.56    
	})
	## 查询所有文档
	db.acct.find().pretty()
	
	* 容易出错的地方:
	 - 括号不匹配或嵌套不正确
	 - 英文符号写成中文
	 - 字符串忘记用引号引起来
	 
    示例2: 插入多笔
	db.acct.insert([
		{
			acct_no:"622345000002",
			acct_name:"Tom",
			acct_type:1,
			balance:2000.00   
		},
		{
			acct_no:"622345000003",
			acct_name:"Dokas",
			acct_type:2,
			balance:5000.12   
		}
	])
	
	示例3: 利用save进行插入, 如果_id域已经存在
	       则执行更新, 如果不存在或不写
		   则执行插入
	db.acct.save({
		"_id" : ObjectId("5c399ee9bc277287e38277c1"),
		acct_no:"622345000003",
		acct_name:"Dokas",
		acct_type:3,
		balance:7777.77   
	})

	
  2)ObjectId: 系统自动产生的主键, 名称固定_id
              自己可以填写该值,但要保证唯一性
    长度: 24位十六进制数
		8位 - 文档创建时间
		6位 - 机器ID
		4位 - 进程ID
		6位 - 流水号
  3)数据类型
    Double		浮点型
	String		字符串
	Object		内嵌对象
	Array		数组, 用[]括起来, 每个元素用
				逗号隔开
	Boolean		布尔, true/false
	ObjectId	系统自动生成的_id号
	Date		日期时间类型
	NULL		空值
	
作业: 
1)关系数据库重要概念复习
2)关系/非关系数据库的特点,对比
3)MongDB的特点
4)MongDB服务器管理(安装,启动,停止,配置)
5)库操作, 集合操作
6)创建一个订单集合(orders), 包含的域有:
  order_id: 订单编号, 字符串
  cust_name: 客户名称, 字符串
  order_date: 下单时间, Date类型
  status: 订单状态, 整数
  order_detail: 订单明细, 商品数组
    product_id: 商品编号, 字符串
	product_name: 商品名称, 字符串
	amt: 商品数量, 整数
	price: 单价, 浮点型
7)在orders表中,插入3比订单数据,每个订单至少
  包含1件商品; 至少有一个订单包含多件商品
	







