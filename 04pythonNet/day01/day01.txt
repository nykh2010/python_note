
<<python 网络编程>>
  魏明择

网络的功能
  数据的传输

internet 因特网


七层网络模型
  也称 OSI(Open System Interconnection) 是国际标准化组织 ISO

七层:
  应用层
  表示层
  会话层
  传输层
  网络层
  数据链路层
  物理层

通信过程

详解:
应用层
   提供用户服务，具体功能由程序体现
   应用层协议:
     HTTP, FTP, SMTP, POP3, HTTPS..
表示层
  数据压缩和优化加密
  格式:JPEG, ASCII, WAV, MP3
会话层
  建立，管理，终止会话
传输层
  提供转输服务，流量控制
  协议有: TCP/UDP协议
网络层
　　进行逻辑地址寻址(IP)实现不能网络之间的路径选择
  网络层协议有:
      IP(IPV4, IPV6), ARP, ICMP ...
数据链路层
  建立逻辑连接，进行硬件地址寻址（MAC地址)差错校验等功能
物理层
  提供数据传输的硬件保证，网络，接口设置，传输介质



OSI模型的优点:
  分步清晰，每一步各司其职
  降低了通信模块的耦合度




TCP/IP模块
  四层模型
    应用层
    传输层
    网络
    物理链路层

  五层模型
    应用层
    传输层
    网络
    链路层
    物理层

网络编程概念
　　网络主机: 在网络中标识的一台计算机  host

  本地使用:
      主机: localhost
      IP: 127.0.0.1

  IP 地址(Internet protocal address):  
    逻辑上标识一台主机
    (网络层地址)
  
查看IP地址:
  Linux/UNIX　平台
     $ ifconfig
  Window平台
     C:> ipconfig

IPv4 (32位)
   点分十进制:
      192.168.0.100   (点之间的数为0~255)

IPv6 (128位)


端口号 port
   作用:
     用来区分一台主机上的进程(正在运行的程序)
　　　端口号的取值:  0~65535(16位)
      0~1023  称为周知端口
         如:
            http   80
            ftp    23 
            ssh    22
      1024~49151 称为注册端口,程序可以自由注册
      49152~65536称为动态端口，由操作系统动态分配

IPv4中特列的IP
  127.0.0.1  本机测试IP(本环回地址)
  192.168.56.129  # 网格中任何一个主机逻辑地址
  192.168.56.0  # 最小地址是为网段地址
  192.168.56.255 # 最大地址为广播地址




TCP/IP协议
　　　UDP协议
　　　　　无连接的，不可靠的数据报文协议
　　　TCP协议
　　　　　面向连接的，可靠的字节流协议


UDP协议编程:

socket模块
  套接字:
    实现网络编程，数据传输接口

什么是套接字
  用来网络通信的对象

UDP通信过程
  服务器端(被动接收数据并处理数据) server
    创建套接字 --> bind(绑定) -->发送和接收--> 关闭套接字
  客户端(主动发出数据) client
    创建套接字 --> 发送和接收数据--> 关闭套接字

服务器端:
  创建UDP套接字socket函数
  　　格式:
  　　　　socket(地址族, 套接字类型, 协议)
  　　参数:
      　地址族:AF_INET(IPv4)/AF_INET6(IPv6)
       type: SOCK_DGRAM (UDP)
       协议: 填0, 默认为0
    返回值:
       套接字对象
  绑定:
    方法名:
      udp_sock.bind(地址和端口号元组d)
    参数:
       地址:  (IP地址字符串, 端口号)　元组
       　　　如: ("192.168.1.100", 8888)
  发送和接收数据
    发送方法名:
      udp_sock.sendto(要发送数据的字节串,地址)
    参数:
      第一个必须为字节串
      地址为: (IP地址字符串, 端口号)　元组
　　　　返回值
　　　　　　　发送的字节数

　　　　接收方法名:
       udp_sock.recvfrom(bufsize)
      参数:
         bufsize 数据的最大字节数
      返回值为:
         (bytes, address)
         bytes为返回的字节串
         address为客户端地址:格式同上
      注: 此函数的阻塞函数
　　关闭套接字
    方法名:
       udp_sock.close()
    作用:
      释放套接字资源

  示例见:
    udp_server.py


UDP客户端
  1. 创建与服务器端同样的套接字
     socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
  2. 绑定(可选)
     如果不绑定任何端口号，则系统为此套接字通信自动
     分配一个49152~65535的端口号
  3. 发送和接收:
     socket.recvfrom 或 socket.sendto
     用法同上
  4. 关闭套接字
     socket.close()
地址address格式:
   (IPv4地址字符串, 端口号:0~65535的整数)
  示例见
    udp_client.py

测试网络状态的命令:
   ping IP地址:
   如:
     ping 192.168.1.100

特殊的IP地址:
  0.0.0.0  仅在绑定是可用
    绑定所有网络设置的IP和端口号


UDP应用之广播
  广播:
    一点发送，多点接收
  
  广播地址:
    每个网段的最大地址:
    $ ifconfig

  让UDP的套接字能发送和接收广播的选项
    方法名:
      upd_sock.setsockopt(level, optname, value: int)
    参数:
       level 指套接字套 SOL_SOCKET
       optname 选项的名字 SO_BROADCAST
       value 选项的值1, 让此套接字可以发送/接收广播
                    0,禁止广播
  示例见
    udp_broadcast_recv.py  # 广播接收端
    udp_broadcast_sender.py  # 广播发送端


练习:
  做一个网络聊天机器人:
    机器人为服务器端:
      问：你好   答: Hi
      问: 你叫什么名字  答: robot
      问: 不是以上的两种   答:我不懂你在说什么

    客户端:
      请输入: 你好
      机器人回答: Hi
      ....
    

