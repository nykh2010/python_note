day05.txt
IO多路复用
  select
    有最大连接数限制,多平台都支持
  poll
    无最大连接数限制,仅UNIX/Linux支持,当连接太多时
    处理速度慢
  epoll
    无最大连接数限制,仅Linux可用,连接数多时等待IO事
    件时不需要太多的处理时间

  poll/epoll的使用
  1. 先创建poll 或EPoll 对象
    io_object =select.poll()/select.epoll()
  2. 将IO对象放在poll 或epoll 对象中准备监控
      io_object.register(fd, 事件)
      io_object.unregister(fd)
  3. 创建字典,用来建立文件描述符和IO对象的对应关系
  4. 循环监控IO对象
      io_object.poll()
  5.  处理发生IO事件

文件描述符 file descriptor
  数字: 大于等于0

IO:
  sys.stdin   sys.stdout  sys.stderror
  fr = open("aaa.txt")
  sock = socket.socket(AF_INET)  # TCP
  sock = socket.socket(AF_INET, SOCK_DGRAM)
  user_sock = sock.accept()
  所有的IO对象都有文件描述符.
   fileno() 方法

结构化数据包
  struct 模块
  struct.pack(fmt, v1, v2,....)
  tuple_result = struct.unpack(fmt, 字节串)

本地套接字
  创建
    sock_fd = socket(AF_UNIX, SOCK_STREAM)
  绑定一个路径,路经是所有服务端和客户端约定的地址
    sock_fd.bind('/home/tarena/mysock')
  监听
    sock_fd.listen()
  等待连接
    sock_fd.accept()




day05笔记
多任务编程
  多个程序同时运行
  通过一定编程方法,在一个程序的运行中可以同时利用计算机执行多个任务

多任务编程的方法:
  多进程
  多线程

并发 和 并行
  1. 并发是指在操作系统中,一个时间段中有几个程序都处于已启动到运行完毕的状态, 且这几个程序都同时占用一个处理器,在同一时刻只有一个进程处理运行状态
  2. 并行是指当系统有一个以上的CPU时,则多个任务运行在不同的CPU上同时进行.


进程 process
  进程是正在执行的程序
  进程是系统进行资源分配和调度的基本单位
  进程有一定的生命周期

程序和进程
  程序是一个可执行文件
  进程是可执行文件运行时状态(占CPU,占RAM资源)


进程的诞生
  1. 用户空间通过操作系统接口或命令发起创建进程的请求
  2. 操作系统接收用户请求,开始创建进程
  3. 操作系统分配计算机资源,确定进程的状态
  4. 操作系统将创建的进程提供给用户使用


进程的相关概念
  CPU时间片
    时间片是指一个进程占用CPU的时间
  PCB(进程控制块process control block)
     在操作系统内核中用来记录进程的资源的内存
       (资源:已打开的文件,占用内存的地址和大小．．．)

  进程ID(PID - Process ID)
    每个进程都有一个唯一的进程标识(大于整数)，永远不会重复

  父进程ID(PPID - Parent Process ID)
    系统中除init进程，其它所有进程都有父进程，即
    其它所有进程都是由另一个进程申请创建的

进程相关的命令:
  $ ps aux 查看所有进程
  $ pstree -p 查看所有进程树，并显示进程ID

进程优先级
  进程在调度过程中的优先执行的程度
  Linux下优先级的范围:
    -20 ~ 19　的整数,数字越小优先级越高

进程的状态：
　　运行状态　: R
    - 正在占用CPU
　　睡眠状态 : S/D
    - 不占用CPU,等待某种条件成立(如:input())
　　停止状态 : T
    - 程序因调试等让出CPU,可以手动继续进行
    - ctrl + z 可以让一个前台程序进入停止状态
　　僵尸状态 : Z
    - 程序执行完毕,等待父进程回收资源

查看进程状态的命令:
  $ ps aux 　# 看STAT 列
     R 运行态
     S 可中断的睡眠状态
     D 不可中断的睡眠状态
     T 停止状态
     Z 僵尸状态 Zombie

进程的特征,
  1. 可以有效利用CPU的多核资源
  2. 进程之间的运行互不影响,各自独立
  3. 进程有的自己的内存空间,互不影响

多进程编程
创建多进程的系统函数 fork
  函数名:
    os.fork()
  作用:
    创建新的进程
  返回值:
    -1 失败
    0 表示当前在子进程中执行此代码
    大于0的数, 表示当前在父进程中执行此代码,此数
       字代表子进程的PID
  说明:
    父进程在执行fork时会复制父进程中的全部资源
      如: 全局变量,打开的IO,...

fork 创建进程示例见:
   fork.py

进程相关的函数:
  模块os 模块
  1. 获取当前进程的ID
    函数: os.getpid()
    返回值: 进程PID号
  2. 获取当前进程的父进程的ID
    函数: os.getppid()
    返回值: 父进程的PID号
  3. 结束当前进程
    函数: os._exit(status)
    参数:0~255的整数,代表退出时的状态,0表示正常退出
  4. 结束当前进程:
    函数: sys.exit([status])
    参数同:os._exit()的status,如果传一个字符串则
    退出时打印字符串,并将status设置为1



孤儿进程和僵尸进程

孤儿进程:
  父进程先于子进程退出,此时子进程会成为孤儿进程
  孤儿进程会被系统进程收养,此时系统进程会成为该进程的
  新的父进程 (在Linux下为init进程)

僵尸进程
  子进程先后父进程退出,父进程没有处理子进程的退出状态
    此时子进程就会成为僵尸进程
  僵尸进程虽然结束,但会存留部分PCB及相应的资源在内存
    中,大量僵尸进程会占用系统资源

故意制造僵尸进程的示例见:
   fork_zombie.py

回收僵尸进程

函数1:
  pid, status = os.wait()
作用:
  在父进程中阻塞等待子进程退出
返回值:
  pid 子进程的PID
  status 子进程的退出状态

函数2:
    pid, status = os.waitpid(pid, option)
作用:
  只阻塞等待PID为pid的子进程退出
参数:
  pid:
    -1 表示任意子进程
    >0 表示等待PID为pid的子进程
  option 
    0 表示阻塞
    1 表示非阻塞




看下面的程序会产生几个进程:

import os
print('开始创建子进程')
os.fork()
os.fork()
os.fork()
import time
time.sleep(20)
print('程序退出')





使用 multiprocessing 内的Process类创建进程
包: multiprocessing

好处: 方便创建进程并回收僵尸子进程

用法:
  1. 将需要执行的进程封装为函数 
  2. 使用模块Process 类生成进程对象,并关联相应的
     函数 
  3. 可以通过对象属性设置进程信息
  4. 启动进程,昆时会自动进行绑定的函数,作用一个进程
     来执行
  5. 回收子进程

创建进程对象的函数
  构造函数:
    multiprocessing.Process(target=None, name=None, args=(), kwargs={})
  作用:
    创建进程对象
  参数:
    target 绑定目标函数
    name 组进程起个名字,默认为 "Process-1"
    args 元组,给target目标函数按位置传参
    kwargs 字典,组target目标函数按照 关键字传参
  返回值:
    进程对象
启动进程的方法:
  方法名: p.start()
  作用: 创建子进程并开始运行

示例见:
  process1.py

回收僵尸进程的的方法:
  方法名:
     p.join([timeout])
  作用:
    阻塞等待回收子进程
  参数:
    timeout 超时时间秒数

进程对象的属性
  p.name   进程的名字
  p.pid    进程的PID号

判断一个子进程是否结束的方法:
  方法名:
    p.is_alive()  # 返回进程是否活着的状态

自定义进程类:
  1. 继承Process类
  2. 编写自己的__init__添加自己的属性
      使用super重新加载父进程的__init__方法
  3. 重写 run方法,实现覆盖此方法
  4. 使用自己的类创建进程对象
  5. 调用start() 启动进程,此时会自动执行run方法
  6. 调用join方法回收子进程

示例见:
  myprocess.py



多进程的优缺点:
  优点:
    可以使用计算机的多核同时运行多个任务,提高了运行效率
  缺点:
    进程的创建和销毁需要消息系统资源较多(时间和内存)

进程池
  原理:
    创建一定数量的进程作为进程池,等待处理事件,事件处理完
    毕时并不销毁进程,而是继续等待处理其它事件,直到所有待
    处理的事件结束再统一销毁进程,增加进程的重复利用率,降
    低资源消耗

进程池的使用方法:
  1. 创建进程池
  2. 将要做的事件放入进程池等待队列
  3. 不断取出事件,使用进程池中进行执行,直到所有事件处理
     完毕
  4. 关闭进程池,回收进程

1. 创建进程池:
  构造函数:
    multiprocessing.Pool(processes=None)
  参数:
    指定进程池中进程的数量,默认根据系统CPU个数自动判定
  返回值:
    进程池对象pool

2. 使用进程池中的进程异步执行相应的任务
  方法:
    pool.apply_async(func, args=(), kwds={}, callback=None)
  作用:
    使用进程池中的进程执行相应的函数
  参数:
    func 进程任务函数
    args 元组,组func按位置传参
    kwds 字典,组func按位置传参
  返回值:
    返回函数事件对象

3. 使用进程池中的进程 同 步执行相应的任务
  方法:
    pool.apply(func, args=(), kwds={})
  作用:
    使用进程池中的进程执行相应的函数
  参数:
    func 进程任务函数
    args 元组,组func按位置传参
    kwds 字典,组func按位置传参
  返回值:
    返回函数事件对象

4. 关闭进程池
  方法:
    pool.close()
  作用:
    关闭进程池,不能再添加新的事件
5. 回收进程池中的子进程资源
  方法:
    pool.join()
  说明:
     阻塞等待回收进程池中的进程


示例见:
  process_pool.py  # 异步示例
  process_pool2.py  # 同步示例 



进程池map方法异步多进程执行map操作
方法:
  pool.map(func, iterable)
作用:
  将要做的事件加入进程池(用进程池并行处理数据)
参数:
  func 事件处理函数
  iterable 可迭代对象
返回值:
  返回结果的列表

示例见:
  process_pool_map.py


预习进程间通信和线程


