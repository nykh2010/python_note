day02回顾
TCP 协议
  传输层协议

TCP/IP模型
5层:
  应用层: 传输应用数据,规则应用层协议
  传输层: 传输控制(TCP/UDP)　　PORT(端口号)
  网络层: 数据包的传输,路径的选择(路由), IP协议: IP地址
  链路层: 点对点的传输 MAC地址
  物理层: 传输介质
4层:
  应用层
  传输层
  网络层
  物理链路层



TCP协议的特点:
  面向连接，可靠，字节流协议

  面向连接
    三次握手(连接)
    四次挥手(断开)
  可靠
    重传，肯定，确认
  字节流协议
    每个数据包有传输序号

UDP协议的特点：
　　无连接的，不可靠的，数据报协议


tcp 套接字编程:
服务器端:
   socket ---> bind ---> listen--> accept--> recv/send-> close

客户端
   socket ---> connect --> send/recv--> close


套按字方法:
  setsockopt()
    设置套接字选项
      SO_BROADCAST 能否收发广播
      SO_REUSERADDR  端口号重用
　　getsockname()   获取套接字绑定的地址
  getpeername()   获取套按字连接端(另一端的IP地址和端口号)


http协议
　　应用层协议，建立在TCP协议之上
　　默认端口号: 80





day03 笔记:
 IO 输入输出 

 I input
 O output

基本输入输出:
  sys.stdin
  sys.stdout
  sys.stderr
套按字:
  socket.socket()  TCP套接字
  socket.socket(AF_INET, SOCK_DGRAM)  UDP套接字

什么是IO操作
  在外部设备与计算机内存中的数据交换的操作，认为是IO操作

外部设备:
  磁盘，网络设备,键盘，鼠标，显示，USB设备，串口

如:
  和终端交互: input, print
  和磁盘交互: read, write
  和TCP网络交互: recv, send
  和UDP网络交互: sendto, recvfrom
  接收客户端连接: accept

IO操作的分类:
  IO密集型程序:
     在程序执行中有大量的IO操作，而CPU运算较少，消耗　CPU少，IO操作数量大时间长
  计算密集型程序:
     程序中计算较多，IO操作比较少，CPU消耗较多


IO操作的类型
　　阻塞IO
　　非阻塞IO
  IO 多路复用




阻塞IO  (Blocking IO)
  阻塞IO是IO的默认形态，是效率较低的一种IO情形

引起IO阻塞的两种情况:
  1. 因为某种条件没有达成造成导致函数阻塞
    如:
      accept, input, recv 等(输入操作)
  2. 处理IO的时间过长,产生阻塞行为
    如:
      write, sendto, send等(输出操作)

套接字设置阻塞的超时的方法:
  格式:
    settimeout(timeout)
  作用:
    设置套接字为阻塞状态及超时时间
  参数:
    timeout  超时时间的秒数，可以为整数或浮点数
　　　　　　None 改为不限时阻塞，等同于setblocking(True)
      大于零的整数或浮点数，改为限时阻塞，同时设置最长的等待时间
      0或0.0 改变非阻塞,等同于setblocking(False)
  说明:
    在阻塞状态下，当在设置的IO对象没有数据准备好，会触发socket.timeout 类型的异常

示例见:
  tcp_server_blocking.py
  tcp_client.py (客户端)


非阻塞IO (Nonblocking IO)
  将原本阻塞函数通过属性的修改，使其变为非阻塞,在非阻塞
  时，当IO没有准备好时，也不会进行等待，而是返回特殊标识或异常方式来通知用户没有数据产生

套接字设置非阻塞的方法:
  settimeout(0)　方法
  setblocking 方法

setblocking 方法:
  作用:
    设置套接字为阻塞或非阻塞状态
　　格式:
    setblocking(flag)
  参数:
    flag
      True 改为阻塞IO, 等同于 settimeout(None)
      False 改为非阻塞IO, 等同于settimeout(0.0)
  说明:
    1.　在非阻塞状态下,当IO对象没有数据准备好时会触发
       BlockingIOError类型的异常
    2. 非阻塞状态通常和循环一起使用，不断执行任务，然
       后再检测IO行为是否满足运行条件

用非阻塞方式实现 TCP服务器示例见:
  tcp_server_nonblock.py

Linux/UNIX 下查看系统资源的命令:
  top 命令

非阻塞的IO的缺点:
  CPU会不断的轮询 各个IO,总处的运行状态，CPU消耗比较大
  CPU利用率低


IO 多路复用 (IO Multi plexing)
  I/O 多路复用是用select, poll,epoll 同时监控多个IO
  对象,当IO对象有变化时(有数据传入或传出时),用通知当前
  进程进行I/O操作,这样可以同时对多个IO进行操作，避免一个
  IO阻塞造成其它IO都无法进行操作的问题，提高的IO的执行
  效率

IO多路复用的种类:
    select  能用于Window, Unix, Linux
    poll    能用于Unix,Linux
    epoll   仅能用于Linux
作用:
  对让个的函数对多个IO对象集中进行等待

IO多路复用模块 select模块
  import select 
  from select import *

select 方式实现IO多路复用
  函数:
    select(rlist, wlist, xlist[, timeout])
  作用:
    监控IO事件，阻塞等待IO事件发生
  参数:
    rlist 列表 读IO ,用于存放需要关注的输入IO
    wlist 列表 写IO,用于存放需要关注的输出IO
    xlist 列表　异常IO, 用于关于出现异常需要处理的IO
    timeout 超时时间（秒），默认为无限阻塞，可以设置为
    　　　　　　　一个数字
  返回值: 元组(rs, ws, xs)
     rs  rlist 中准备就序的IO对象
     ws  wlist 中准备就序的IO对象
     xs  wlist 中准备就序的IO对象
　　说明:
    当因超时解除阻塞时，所有的rs,ws,xs列表为空

基于 select 的IO多路复用的实现步骤
　　1.　将关注的IO放到对应的类另的关注列表中
  2. 通过select 函数进行监控
  3. 遍历select 返回值确定哪儿个IO事件发生
  4. 处理发生IO事件的IO

用IO复用中select4实现tcp 服务器示例见:
  tcp_server_select.py


select 实现的IO多路复用的优缺点:
  缺点:
    1.数据要先到内核中,再复制到用户空间,两次复制比较耗时
    2. 内核轮询所有的IO对象比较耗时
    3. 支持的IO个数受限制(Linux下默认最大1024个IO)
  优点:
    跨平台支持(多数平台都支持select)
    IO多路复用占用的计算机资源相对较少



位运算:
  &  位与
  |  位或
  ^  位异或
  << 左移
  >> 右移
  ~  取反
复合赋值 位运算符:
  &=  |= ^=   <<=   >>= 

& 位与
  格式:
    整数表达式x & 整数表达式y
  作用:
    按位操作, 两个对应的位都为1, 结果才为1
             两个对应的位只要有一个为0,结果就为0
  示例:
    0b00001010  % 0b00001100 等于 10 & 12 =8

位或:
  格式
    x | y
  作用:
    按位操作:
         两个对应的位只要有一个为1结果就为1
         两个都为0时结果才为0
  示例:
    0b00001010 | 0b00001100  等于10 | 12 = 14

位异或:
  格式 x ^ y
    作用:
      按位操作:
          两个对应的位不同,结果为1
          两个对应的位相同,结果为0
  示例:
    0b00001010 ^ 0b00001100  等于10 ^ 12 = 6

左移运算:
  格式:
    整数表达式x  << 整数表达式y
  作用:
    将x的二进制值,按位向左移动y位,低位补零

  示例:
    0b00000110 << 1  ===> 0b00001100  # 12
    即: 6 << 1 等于12
    0b00000110 << 2  ===> 0b00011000  # 24
    0b00000110 << 3  ===> 0b00110000  # 48

右移运算:
  格式:
    整数表达式x >> 整数表达式y
  作用:
    将x的二进制值, 按位向左移动y位,低位溢出丢弃
  示例:
    0x00000110  值为6
    0x00000110 >> 1  ===> 0b00000011
    0x00000110 >> 2  ===> 0b00000001
    0x00000110 >> 3  ===> 0b00000000  # 零

~ 求反
  格式:
    ~ 表达式
  说明:
    -1 求反为 00000000
    0  求反为-1(补码形式存在)

  负数的补码算法:
     原数的整数部分取反加1
       即-1 的补码为:
          1 的原码: 00000001
              反码: 11111110
              加1: 11111111
       -7 源码:    0000111
          反码:  1111000
          加1:   1111001



练习:
  1. 实现网络版的学生信息管理程序:
    要求:
      1. 数据存储于服务器端
      2. 要求服务器端用select IO复用机制实现(TCP协议)
      3. 客户端实现添加,删除,显示学生信息功能
      4. 要求所有客户端都可以同时对服务器端进行操作
      


