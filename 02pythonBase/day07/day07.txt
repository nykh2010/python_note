L += [a]
day06回顾:
   while 语句
   for 语句

while 语句，可以根据条件控制循环
  死循环:
    条件一直成立的循环
　　语法:
    while 真值表达式:
        语句块1
    else:
        语句块2

for 语句可以对可迭代对象进行依次遍历
  语法:
    for 变量列表 in 可迭代对象:
        语句块1
    else:
        语句块2
　　
range(起始值, 终止值,步长) 
　　　　生成一系列整数

break 语句
  作用:
    跳出'当前'循环语句
  
  说明:
    循环语句中的else子句部分不会执行





day07笔记:

continue 语句:
  作用:
    用于循环语句(while，for语句)中，不再执行本次循不continue之后的语句，重新开始一次新的循环

  说明:
    1. 在for语句中,执行continue语句，将会从可迭代对象中取下一个元素，绑定变量后再次进行循环
    2. 在while语句中,执行continue语句，将会直接跳转到while语句的真值表达式处，重新开始一次新的循环
  示例见:
    continue.py
    continue_while.py

１．　求 1 ~ 500 之间(不包含500)所有 不能被 5或 7或 11 整除的数的和
  　求：
  　　　　1 + 2 + 3 + 4 + 6 + 8 + 9 + 12 + .... 的和


循环小结:
  while 语句
  for 语句:
  　   字符串
   　  range() 函数返回的对象是可迭代对象
　　break 语句
  continue 语句







列表 list
  问题:
    如何将计算机运算的数据临时存入一个地方，同时又方便添加，删除和修改等操作?

列表的定义:
  列表是一种容器
  列表是可以被改变的序列
  列表中由一系列特定元素组成的，元素与元素之间可能没有任何的关联关系，但他们之间有先后顺序关系

创建空列表的字面值表达式
  [] 
  或
  L = []  # L　绑定空列表
创建非空列表:
  L = [1, 2, 3, 4]
  L = ['Beijing', 'ShangHai', 'Shenzhen']
  L = [1, 'Two', 3.14, '四']
  L = [1, 2, [3.1, 3.2, 3.3], 4]  # 含有四个元素的列表

列表的构造(创建)函数list
  list()  生成一个空的列表 等同于　[]
  list(iterable) 用可迭代对象创建一个列表


列表的运算:
  算术运算
    +  *  += *= 等同于字符串的　运算
  示例:
    s = [1, 2, 3] + [4, 5, 6]
    s = [3, 4] * 3
  += 运算
  　　变量 += 可迭代对象
    L = [1, 2, 3]
    L += [4, 5]
    L += "ABC"
    L += range(6, 10)
  x *= y 等同于 x = x * y



列表的比较运算:
  <  <=  >  >=  ==  !=
  比较规则和字符串的比较规则一样

  示例:
    [1, 2, 3] < [1, 3, 2]  # True
    [1, 2, 3] != [1, 3, 2]  # True
    [1, 'Two'] > ['Two', 1]  # TypeError
    [1, 'Two'] != ['Two', 1]  # True

列表是可迭代对象
  L = [1, 3, 5, 7]
  for x in L:
      print(x)

练习:
  输入三行文字，将这三行文字存于一个列表L中,并打印

  如:
    请输入: abc<回车>
    请输入: 1234<回车>
    请输入: 你好<回车>
  生成如下列表:
    print(L)  # ['abc', '123', '你好']


列表的in / not in运算符
　　作用:
   in 判断一个元素是否存在于列表中,如存在返回True, 否则返回False

   not in 返回值与in相反
  示例:
    L = [1, 'Two', 3, 'Four']
    1 in L  # True
    '3' in L  # False
    10 not in L  # True
    'Four' not in L # False
 
列表的索引操作:
  语法:
    列表[整数表达式] 

  用法等同于字符串的索引，分为正向索引和反向索引，规则与字符串完全相同

  列表的索引赋值:
    列表是可变的，可以通过索引赋值改变列表中的元素
  语法:
    列表[整数表达式] = 表达式
  示例:
    x = [1, 2, 3, 4]
    x[2] = 3.14  # 改变了第三个元素的值

列表的切片
  列表[:]
  列表[::]
  说明:
  　　列表的切片取值返回一个列表，规则等同于字符串切片规则
  x = list(range(9))
  y = x[1:9:2]  # 奇数 1 3 5 7

列表的切片赋值
  作用:
    可以改变原列表的排列，可以插入和修改数据
    可以用切片改变列表的对应元素的值
  语法:
    列表[切片] = 可迭代对象
  示例:
    L = [2, 3, 4]
    L[0:1] = [1.1, 2.2]
    L[2:] = [3.3, 4.4, 5.5]
    L[:] = [3, 4]  # L = [3, 4]
    L[0:0] = [1, 2]  # L = [1, 2, 3, 4]
    L = [3, 4]
    L[1:1] = [3.5, 3.6]  # L = [3, 3.5, 3.6, 4]
    L = [3, 4]
    L[2:] = [5, 6]  # L = [3, 4, 5, 6]
    L = [2, 3, 4]
    L[1:2] = "AB"  # L 
切片赋值注意事项:
  对于步长不等于1 的切片赋值，赋值运算符右侧的可迭代对象提供的元素个数一定要等于切片切出的段数
  例:
    L = [1, 2, 3, 4, 5, 6]
    L[::2] = [1.1, 3.3, 5.5]  # 对的
    L[::2] = "ABCD"  # 错的




del 语句 用于删除列表元素
  del 列表[整数索引]
  del 列表[切片]

  L = [0, 1, 2, 3, 4, 5, 6]
  del L[0]
  print(L)  # [1, 2, 3, 4, 5, 6]
  del L[::2]
  print(L)  # [2, 4, 6]


练习:
  已知有列表:
    L = [3, 5]
    用索引和切片操作，将原列表改变为:
    L = [1, 2, 3, 4, 5, 6]
    将列表反转,删除最后一个元素后打印此列表:
    ...
    print(L)  # [6, 5, 4, 3, 2]


python3　中可以用于序列的函数
  len(x)  返回容器内元素的数量
  max(x)  返回最大值元素
  min(x)  返回最小值元素
  sum(x)  返回序列中所有元素的和(元素必须是数值类型)
  any(x)  真值测试,如果列表中其中一个值为真值则返回True
  all(x)  真值测试，如果列表中所有值为真值则返回True,否则返回False

练习:
  写一个程序，让用户输入很多正整数，当输入小于零的数时结束输入
    1) 打印这些数的和
    2) 打印这些数的最大数和第二大的数
    3) 删除最小的一个数
    4) 按原来输入的顺序打印出剩余的这些数

深拷贝和浅拷贝
浅拷贝 shallow copy
  浅拷贝是指在复制过程中，只复制一层，不会复制深层变量绑定对象的复制过程

  示例:
    L = [3.1, 3.2]
    L1 = [1, 2, L]
    L2 = L1.copy()
    L2[2][0] = 3.14
    print(L2)  # [1, 2, [3.14, 3.2]]
    print(L1)  # [1, 2, [3.14, 3.2]]

深拷贝:
    import copy  # 导入copy模块
    L = [3.1, 3.2]
    L1 = [1, 2, L]
    L2 = copy.deepcopy(L1) # << --深拷贝
    L2[2][0] = 3.14
    print(L2)  # [1, 2, [3.14, 3.2]]
    print(L1)  # [1, 2, [3.1, 3.2]]
  注：
  　　深拷贝通常只对可变对象进行复制，不可变对象通常不被复制



练习:
  1. 输入很多行文字，存入一个列表中
   　　每次输入后回车算作一行
   　　任意输入多行，当直接回车(即空行时算作结束输入)
     1) 按原输入的内容在屏幕上输出内容
     2) 打印出您共输入了多少行文字
     3) 打印出您共输入了多少个字符
  2. 写一个程序，任意输入一些数存于列表L中，当输入负数时 结束输入
  　　1) 将列表中数字存入到另一个列表L2中，要求:
       重复输出多次的数字只在L2中保留一份(去重)
       如:
         L = [1, 3, 2, 1, 6, 4, 2, .... 98, 82]
         则:
         L2 = [1, 3, 2, 6, 4, 98, 82]
         







