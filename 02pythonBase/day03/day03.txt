

回顾：
ls
 .
 ..
cd 

mkdir  

rm
rmdir

touch
vi/vim 
 	i o a


整数，小数，复数，bool
+

-

*
**

/
// 
%

赋值运算：
=
复合运算：
+=
-=

比较运算：
==
a = 10
del a

float()
int()
complex(x,y)

bool(x)

abs(x)

day03

round(num,ndigits=0):
功能：四舍五入；默认情况保留正数部分。
ndigits：
	正数：代表的是最终数据要保留的小数个数。
>> round(78.523,1)
78.5
>>> round(78.523,2)
78.52
>>> round(78.5723,1)
78.6

	负数：代表的是最终结果数据小数点向左进行四舍五入运算。
>>> round(78.5723,-1)
80.0
>>> round(672178.5723,-2)
672200.0
>>> round(672178.5723,-3)
672000.0


pow(x,y,z=None):
	功能：求x**y,如果z对应的数据给出，结果是：x**y%z
>>> pow(10,2)
100
>>> pow(3,2)
9
>>> pow(3,2,4)
1

语句：
	语句可以用表达式组成，一行写一条语句，
	一行也可以写多条语句，语句和语句之间使用分号（；）隔开

input():基本的输入函数
	功能：从标准的输入设备上读入一个字符串。
		注意：尾部的换行符会被删除。
	格式：input("提示字符串")
		提示字符串可以有，也可以没有，建议：要有提示字符串
	返回值：返回的是字符串。

print（）：基本的输出函数
	功能：将一系列的数据以字符串的形式，输出到标准的输出设备上，
		默认是终端。
	print(value, ..., sep=' ', end='\n', 
		file=sys.stdout, flush=False)
	sep:不同的数据之间用分隔符隔开。（默认是一个空格）
	end:输出完毕之后，流文件的尾部自动追加的字符串，默认是换行。
	file:流文件对象，默认是sys.stdout.
	flush:是否把输出缓冲区中的数据立即输出。（输出缓冲区
		默认大小4K）
		flush默认是False，表示不立即输出
			   True.立即输出。
		注意：输出缓冲区中的数据，遇到“\n”也会立即输出

if 语句：
	作用：if语句可以改变程序运行的流程
	让程序根据条件选择某些语句执行或者是不执行。
	语法1：
		if 真值表达式：
		    语句块1
		说明：如果真值表达式为真，语句块1会执行，						否则语句块1否则不执行。
	语法2：
		if 真值表达式：
			语句块1
		else：
			语句块2	
		说明：如果真值表达式为真，执行语句块1，
			否则，执行的是else对应的语句块2。
练习：
	1、输入一个整数，用程序判断数据是奇数还是偶数，并打印输出？
	2、输入一个整数，用程序判断数据是正数还是负数，并打印输出？

		思考：输入的是0。
	
	终极方式：
		if 真值表达式1：
			语句块1
		elif 真值表达式2：
			语句块2
		elif 真值表达式3：
			语句块3
		.
		.
		.
		else:
			语句块n
	注意：
		elif子语句，可以0个，可以是多个
		else最多是一个，可以没有。
		else放在if语句的最后面，当所有的真值表达式为假时，
			去执行else对应的语句块。

练习：
	输入季度，输出季度对应的月份，如果输入的1-4之外的数据，提示		输入错误？
1、输入一年中的月份（1-12），输出的是月份在那个季节，输入的数据
如果是1-12之外的数据，显示输入错误？

2、BMI=体重/身高**2
  如果，BMI  小于18.5 过轻
		18.5-25：正常
		25-28    过重
		28-32    肥胖

if语句的嵌套：
	if语句对应的语句块本身可以由多条语句组成。
	if语句可以嵌套在if语句的内部。

	
条件表达式：
 	语法：
		表达式1 if 真正表达式 else 表达式2
	如果真值表达式为真---表达式1
		否则----表达式2
作业：
1、编程实现一个abs函数，使用if语句来实现？
2、出租车计价器：
	收费标准：
	3公里--起步价13元
	超过3公里，2.3元/公里
	超过15公里，加收50%空驶费--3.45元/公里。
	输入公里数，输出的是费用。
3、输入一个年份，计算是不是闰年？
	每四年一个闰年，每百年不闰，每四百年又是闰年


	
	
	










	
	


	


































