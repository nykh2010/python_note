day09回顾:
  集合set / 固定集合 frozenset
    集合是无序的容器
    集合内的元素必须是不可变类型的数据
    集合内的元素不能重复

  set()  / {1, 2, 3, 4}
  frozenset()  / frozenset({1, 2, 3, 4})

  集合的运算:
    &  |  -  ^  <  > == !=  <= >=
  
集合推导式
  {x ** 2 for x in range(10)}

函数 function
  函数是可以重复执行"语句块 "

def 语句:
    def 函数名(形参列表):
        语句块

    作用是:
      创建一个函数(把语句块打包,用函数名(变量)来绑定)


调用:
  函数名(实际传递参数)


return 语句
  作用:
    停止函数执行,返回一个对象的引用关系(默认是返回None)

  语法:
     return [表达式]

函数的参数传递:
  函数调用者把 数据 给 函数(把数据交给函数)

  传递方式:
    位置传参
      序列传参  *序列
    关键字传参
      字典关键字传参  **字典


day10笔记:
  -----------以下讲 函数的形参 -------
函数的缺省参数:
  语法:
    def 函数名(形参名1=默认实参1, 形参名2=默认实参2, ...)
       语句块
  作用:
    可以让调用者少传递实参
  示例见:
    default_args.py
  说明:
    1. 缺省参数必须自右至左依次存在,如果一个参数有缺省参数,则其右侧的所有参都必须有缺省参数
    2. 缺省参数可以有0个,1个或多个,甚至全部都有缺省参数
  错误示例:
    def fx(a, b=10, c):  # 这是错误的
        pass



函数形参的定义方式有四种:
    位置形参
    星号元组形参
    命名关键字形参
    双星号字典形参

位置形参:
  语法:
    def 函数名(形参名1, 形参名2, ....):
        语句块
星号元组形参:
  语法:
    def 函数名(*元组形参名):
        语句块
  作用:
    收集多余的位置传参
  说明:
    元组形参名通常叫"args"
  示例见:
    star_tuple_args.py

练习:
  写一个函数 mysum, 可以传入任意个实参的数字,
  此函数返回所有实参的和:
  def mysum(*args):
      ...  # <<<--- 此处需要自己实现

  print(mysum(1, 2, 3, 4))  # 10
  print(mysum(1, 2, 3, 4, 5))  # 15

命名关键字形参
  语法:
    def 函数名(*, 命名关键字形参):
        语句块
    或
    def 函数名(*args, 命名关键字形参):
        语句块
  作用:
    强制所有的参数都必须用关键字传参或字典关键字传参

  示例见:
    named_keyword_args.py




双星号字典形参
  语法:
    def 函数名(**字典形参名):
       语句块
  作用:
    收集多余的关键字传参

  示例见:
      double_star_dict_args.py

形参说明:
  位置形参，缺省参数，星号元组形参，双星号字典形参可以混合使用

函数形参的自左至右的顺序依次为:
  位置形参
  星号元组形参
  命名关键字形参
  双星号字典形参

示例:
  def fn(a, b, *args, c, **kwargs):
      pass

  fn(100, 200, 300, 400, c='C', d='D', e='E')




全局变量和局部变量
  局部变量
    1. 定义在函数内部的变量称为局部变量(函数的形参也是局部变量)
    2. 局部变量只能在函数内部使用
    3. 局部变量在函数调用时才能够被创建，在函数调用之后会自动销毁
  全局变量
    定义在函数外部，模块内部的变量称为全局变量
    全局变量所有的函数都可以直接访问（但函数内不能将其直接赋值来改变绑定关系）
  示例见:
    globa_local.py

局部变量说明:
  在函数内部首次对变量赋值是创建局部变量,再次为此变量赋值是改变此局部变量的绑定关系
  局部变量只能在声明此变量的"函数"内部进行访问和修改s

globals() 和 locals函数
  globadls() 返回当前全局作用域内变量的字典
  locals()  返回当前局部作用域内变量的字典

  示例见:
    globals_locals.py

函数变量:
  函数名是变量，它在创建函数时绑定一个函数

示例1:
  def fn():
      print("hello world!")
  f1 = fn  # <<<---注意这里没加括号，不是函数调用
  f1()  # 调用f1绑定的函数

示例2:
  def f1():
      print("f1被调用")

  def f2():
      print("f2被调用")

  f1, f2 = f2, f1
  f1()  # 请问此处调用谁


练习:
  创建一个全局变量
    L = []
  写一个函数:
    def input_number():
        .... # <<-- 此函数内从键盘读入一个数字

  此函数每次调用将会从键盘读入一些数据，想办法将读入的数据追加到L列表中...




一个函数可以作为另一个函数的实参传递

示例:
def f1():
    print("f1被调用")

def f2():
    print("f2被调用")

def fx(fn):
    print(fn)
    fn()  # 调用形参fn绑定的函数

fx(f1)  # 将函数f1传入了fx中
fx(f2)  


看懂下面的代码在干什么？

def mycal(fn):
   L = [1, 3, 5, 7, 9]
   return fn(L)

print(mycal(max))  # 9
print(mycal(sum))  # 25
print(mycal(min))  # 1



函数可以作为另一个函数的返回值
  示例见:
    return_function.py

函数的嵌套定义
  是指一个函数里用def语句来创其它函数的情况

示例见:
  function_embed_def.py

python的作用域
  作用域也叫命名空间, 是访问变量时找变量名的范围空间

python的四个作用域 LEGB
  作用域                 英文解释           英文简写
局部作用域          local(function)            L
外部嵌套函数作用域  Enclosing function locals   E
函数定义所在模块的作用域  Global(module)         G
python内建模块作用域     Builtin(Python)        B

示例见:
  namespace.py

    此函数传入"加" 返回 myadd函数
写一个计算公式的解释执行器
  已知有下列一些函数:
    def myadd(x, y):
        return x + y

    def mysub(x, y):
        return x - y

    def mymul(x, y)
        return x * y
  有一个函数 get_op(x) 此函数定义如下:
    def get_op(x):
        .... # 此处自己实现
    此函数传入"加" 返回 myadd函数
    此函数传入"减" 返回 mysub函数
    此函数传入"乘" 返回 mymul函数
  在主函数中程序如下:
    def main():
        while True:
           s = input('请输入计算公式')  # 10 加 20
           L = s.split()  # L = ['10', '加', '20']
           a = int(L[0])
           b = int(L[2])
           fn = get_op(L[1])
           print("结果是:", fn(a, b))  # 30
    main()



练习:
  1. 写一个函数mysum(n)
    此函数用来计算 1 + 2 + 3 + ... + n 的值
    如:
      print(mysum(100))  # 5050

  2. 给出一个整数n,写一个函数myfac(n)计算 n! (n的阶乘)
    n! = 1*2*3*...*n
    如:
      print(myfac(5))  # 120
  3. 给出一个数n, 写一个函数 计算:
     1 + 2**2 + 3**3 + .... n**n的和

明日预告:
  global 语句
  nonlocal 语句
  lambda 表达式
  高阶函数: map, filter, sorted
  eval, exec 函数
  递归函数 recursion

  































