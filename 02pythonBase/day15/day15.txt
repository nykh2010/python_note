day14回顾:
异常
  错误
  异常

四条语句:
  try-except
  　　　捕获异常，将异常状态转为正常状态
  　　try:
       可能出现异常的语句
    except 异常类型1 as 变量:
       ....
    except 异常类型2:
       ...
    except 异常类型３, 异常类型４, ... as 变量:
       ...
    except:  # 匹配其它类型错误
       ...
    else:
       ...
    finally:  任何状态都会执行其中的语句
       ...

  try-finally:  不管理任何状态(流程) 都会去执行相应的语句
      try:
         ...
      finally:
         ...
  raise 触发异常（发送错误通知，并进入异常流程)
  assert 触发AssertionError类型的异常

迭代器
  iter(可迭代对象)  返回迭代器
  next(迭代器)  取值，在没有值时触发StopIteration

生成器:
  现用现生成
　　两种:
    生成器函数
    生成器表达式

  def myyield():
     i = 100
     yield 2
     yield 3
     yield 5
     ...
  next(it) 调用时才开始执行，并且，执行到yield语句时暂停执行

  生成器表达式:
    ( x ** 2 for x in range(1, 10) )

迭代工具函数:
  zip(iter1, iter2, ....)  
  enumerate(iter, start=0)

day15 笔记:
  字节
  字节串bytes/字节数组bytearray
  文件操作

字节串 和 字节数组
什么是字节
    1Giga = 1024M    约 1,000,000,000
    1Million = 1024K 约 1,000,000
    1Kilo = 1024B    约 1,000
    1Byte = 8bit(位)  a
字节byte是计算机数据存储和数据传输的基本单位
  1字节(byte) = 8位(bit)


字节串(也叫字节序列) bytes
  存储以字节为单位的数据
  字节串是不可以改变的字节序列
  说明:
    字节是0~255之间的整数,用来表示一个字节的取值

创建空的字节串的字面值
    b''
    b""
    b''''''
    b""""""
创建非空字节串的字面值:
    b'ABCD'
    b'Hello'
    b'\x41\x42'

字节串的构造函数bytes
  bytes()  生成一个空的字节串 等同于 b''
  bytes(整型可迭代对象)  用迭代对象初始化一个字节串
  bytes(整数n) 生成n个值为0的字节串
  bytes(字符串, encoding='utf-8')  用字符串的转换编码生成了个字节串
  如:
    b = bytes()
    b = bytes(range(100))
    b = byters([65, 66, 67, 68])
    b = bytes(10)
    b = bytes("hello", 'utf-8')

序列(五种):
  字符串
  列表
  元组
  字节串
  字节数组
序列具有相同的操作:
    +  +=  * *=
    < <= > >= == != 
    in / not in 
    索引和切片

  如:
    b = b'ABC123'
    65 in b  # True
    b'12' in b  # True

    x = b[3]  # x = 49
    b1 = b[::2]   # b = b'AC2'

bytes 与 str的区别:
  bytes存储字节(0~255) 表示数据
  str 存储Unicode字符(0~65535)  表示文字个信息

bytes 转 str转换
        编码(encode)
  str  ------------> bytes
       b = s.encode(encoding='utf-8')

        解码(decode)
  bytes -----------> str
       s = b.decode(encoding='utf-8')
  例:
    s = "hello你好"
    b = s.encode('utf-8')  # b 绑定字节串
    s2 = b.decode('utf-8') # s2 = 'hello你好'

练习:
  写一个程序,从键盘输入一段字符串,用变量s绑定
  1,将此字符串转为字节串用变量b绑定,并打印出来
  2. 打印字符串s 的长度和字节串b的长度(用len函数)
  3. 将b字节串再转换为字符串用变量s2绑定,判断s2与s是否相同


小结:
  可变的数据类型:
    列表 list
    字典 dict
    集合 set
    字节数组 bytearray


字节数组

字节数组的构造函数:
  bytearray()  生成一个空的字节数组
  bytearray(整型可迭代对象)  用迭代对象初始化一个字节数组
  bytearray(整数n) 生成n个值为0的字节数组
  bytearray(字符串, encoding='utf-8')  用字符串的转换编码生成了个字节数组
  如:
    b = bytearray()
    b = bytearray(range(100))
    b = bytearray([65, 66, 67, 68])
    b = bytearray(10)
    b = bytearray("hello", 'utf-8')

操作:
  + += * *= 
  < <= > >= ==  !=
  in/ not in
  索引切片
    (字节数组可以索引/切片取值,也可以索引/切片赋值)
  示例:
  ba = bytearray(b'hello123')
  ba[0] = ord('H')
  print(ba[::2])
  ba[::2] = b'ABCD'  # 切片赋值

bytearray的方法:
  文档参见:
    python_base_docs_html/bytearray.html

能用于字节串和字节数组的函数:
  len(x), min(x), max(x), sum(x), any(x), all(x)



文件 File
什么是文件
  文件是用于数据存储的单位
  文件通常来用长期存储数据
  文件中的数据是以字节为单位进行存储的

文件的操作流程
  1. 打开文件
  2. 读/写文件
  3. 关闭文件

文件打开的函数:
  open(file, mode='rt')  用于打开一个文件，返回此文件的文件流对象，如果打开失败，则会触发OSError类型的错误

文件的关闭方法:
  F.close()  # 关闭文件,释放系统资源

文件的其它方法参见文档:
　　python_base_docs_html/文件.html

文本文件的操作:
  打开模式: 't'
  说明:
    1. 对文本文件的读写需要用字符串(str) 进行读取和写入
    2. 默认文件中存储的都为字符数据，在读写中会自动进行编解码操作
    3. 以行为单位分隔，在python内部统一用'\n'作为换行符进行分隔

各操作系统的换行符:
  Linux/Mac OS X换行符: '\n'
  Windows 换行符: '\r\n'

文本文件写操作方法:
  F.write()
  F.writelines()
  操作模式:
     'w'  / 'x'  / 'a'
  示例见:
    file_write_text.py

练习:
  1. 写一个程序 ,输入很多人的姓名,年龄,成绩, 把这些人的信息存入到文本文件'mydata.txt'中,格式为:
    张三 20 100
    李四 21 96
    ...
  2. 写一个程序,把mydata.txt中的内容取出来,再以如下格式打印到终端上
    张三 今年 20 岁, 成绩是: 100
    李四 今年 21 岁, 成绩是: 96
    ...




二进制文件操作:
  二进制文件操作模式: 'b'
  默认文件中存储都是以字节(byte)为单位的数据,通常有人为规定的格式
  对二进制文件的读写需要用字节串(bytes) 进行操作

读操作:
  F.read()  返回字符串

写操作:
  F.write(b)   b必须为字节串
  示例见:
    file_read_binary.py
    file_write_binary.py

F.seek() 方法:
  作用:
    设置文件的读写位置
  格式:
    F.seek(偏移量, whence=相对位置)
      偏移量:
        大于0代表向文件末尾方向移动
        小于0代表向文件头方向移动
      相对位置:
        0代表从文件头开始偏移
        1代表从当前读写位置开始偏移
        2代表从文件尾开始偏移
  示例见:
    file_seek.py


F.flush示例见:
  file_flush.py


标准输入输出文件
  sys.stdin  # 标准输入文件,默认为键盘
  sys.stdout  # 标准输出文件,默认为终端
  sys.stderr  # 标准错误输出文件,默认为终端
  模块名: sys
    标准文件 不需要打开和关闭就可以直接使用





练习:
  1. 写程序,实现复制文件功能(只复制文件,不复制文件夹)
    要求:
      1. 源文件名和目标文件名需手动输入
      2. 要考虑文件关闭问题
      3. 要考虑超大文件问题
      4. 要能复制二进制文件

  2. 改写学生信息管理系统,需要添加两个功能:
      9) 保存信息到文件(si.txt)
      10) 从文件中读取数据(si.txt)

