day07回顾
  continue 语句
    用于循环中，结束本次循环重新开始新的循环

  列表 list
    容器
    可变的序列
　　创建列表的方式
      []
      [1, 2, 3]
      list()
      list(可迭代对象)
  列表的运算:
    + *  
    列表变量 += 可迭代对象
    <  <=  >  >=  == !=
    in / not in 
    索引 index／切片slice

    列表是可变的对象，支持:
      索引赋值
        L[0] = 10
      切片赋值
        L[::2] = [1, 2, 3]

深拷贝 / 浅拷贝 / 不拷贝
L = [1, 2, 3]
L2 = L  # 不拷贝(复制copy)
L3 = L.copy  # L3 = L[:]  浅拷贝

import copy
L4 = copy.deepcopy(L)  # 深拷贝


len(x), sum(x), min(x), max(x), any(x), all(x)

L.remove()
L.copy()
L.append(x)
L.extend(x)  # L += x
L.clear()
L.pop()
详见：
　　>>> help(list)  

day08笔记:
   字符串文本解析方法 split　和　join
     S.split(sep=None) 将字符串使用sep作为分隔符分割S字符串，返回分割后的字符串列表，当不给定参数时，使用空白字符作为分隔符分割
     　　空白字符: ' \n\t\r'
     S.join(iterable) 用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串

  例:
    s = 'Beijing is captial'
    L = s.split(' ')  # L=['Beijing', 'is', 'captial']
    s2 = '\\'.join(['C:', 'Windows', 'calc.exe'])

练习:
  已知有字符串'hello' 
     生成 'h e l l o'  和 'h-e-l-l-o'

    s = 'hello'
    s2 = ' '.join(s)
    s3 = '-'.join(s)



列表推导式 list comprehension
  列表推导式是用可迭代对象依次生成带有多个元素的列表的表达式

  作用:
    用简易方法生成列表
  语法:
    [表达式　for 变量 in 可迭代对象]
    或
    [表达式　for 变量 in 可迭代对象 if 真值表达式]
  例:
    # 以下生成一个数据为 1 ~ 9 的平方的列表

    L = [x ** 2 for x in range(1, 10)]

练习:
  用列表推导式生成 1 ~ 100 范围内奇数的列表
   [1, 3, 5, 7, ..... 99]
  答案：
  　　L = [x for x in range(1, 100, 2)]
　　　　print(L)

示例(带有if的列表推导式)
   L = [x for x in range(1, 100) if x % 2 == 1]
   print(L)

练习:
  输入一个开始的整数用begin绑定
  输入一个结束的整数用end绑定
  将从begin开始，到end结束范围(不包含end)的所有的偶数存于列表中,并打印
  (建议用列表推导式完成)


列表推导式的嵌套：
　　[表达式
      for 变量1 in 可迭代对象1 if 真值表达式1
          for 变量2 in 可迭代对象2 if 真值表达式2
              ... ]
  　示例:
     将列表 [10, 20, 30]中的元素分组与 [1, 2, 3]的元素加相,得到的元素放于一个列表中
     lst = [x + y for x in [10, 20, 30]
              for y in [1, 2, 3]]
     # lst = [11, 12, 13, 21, 22, 23, 31, 32, 33]
练习:
  1. 用字符串s1 = 'ABC', 和 s2 = '123'
    生成如下列表:
    ['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']
    s1 = "ABC"
    s2 = '123'
    L = [x + y for x in s1 for y in s2]

  2. 已知有一个字符串s = '100,200,300,500,800'
    将其转化为列表,列表内都为整数:
    结果如下:
      L = [100,200,300,500,800]
    答案:
      s = '100,200,300,500,800'
      Ls = s.split(',')  # ['100', '200', '300', '500', '800']
      L = [int(x) for x in Ls]


元组 tuple
  元组的定义:
    元组是不可以改变的序列容器,同list一样,元组是可以存入任意类型数据的容器

  元组的表示方式:
    用小括号() 括起来,单个元素括起来后加逗号(,)区分单个对象还是元组
  创建空元组的字面值
    t = ()  #  t 绑定空元组
  创建非空元组的字面值表示:
    t = 200,
    t = (20,)
    t = (1, 2, 3)
    t = 100, 200, 300
  type(x) 函数可以返x的类型



元组的构造函数tuple
  tuple() 生成一个空的元组 等同于 ()
  tuple(iterable) 用可迭代对象生成一个元组

  示例:
    t = tuple()
    t = tuple(range(1, 10, 3))
    t = tuple("ABC")

  元组的运算:
    + += * += 
    注:
     y += x
        y对象的id可能会变量,因为原组不可变,所以相加时会创建新对象
    比较运算:
      < <= > >= == != 
      比较规则等同于列表的比较规则
    in / not  in 运算符
      规则同列表一致
    索引/切片运算
      规则同列表
      注:
        元组不支持索引和切片赋值操作

元组的方法:
  T.index(v[,begin[,end]])  返回对应元素的索引下标
  T.count(x)  返回元组中对应元素的个数

序列相关的函数可以用于元组:
   len(x), max(x), min(x), sum(x), any(x), all(x)

序列的三个构造函数:
   str(x)
   list(x)
   tuple(x)

序列相关的其它函数:
  reversed(seq) 返回反向顺序的可迭代对象
  sorted(iterable, reverse=False)  返回已排序的列表,默认为升序排序

  示例:
    L = [1, 3, 5, 7]
    for x in reversed(L):
        print(x)  # 7 5 3 1
    L2 = [x for x in reversed(L)]  # L2= [7, 5, 3, 1]

    # 排序:
        t = (6, 3, 5, 7)
        L = sorted(t)  # L = [3, 5, 6, 7]
        L = sorted(t, reverse=True) # L= [7, 6, 5, 3]
        L = sorted('world')  # L=['d', 'l', 'o', 'r', 'w']

练习:
  任意输入一个字符串,将此字符串中的空格全部去除,再将此字符串返转后打印出来
  如:
    请输入: a bc def g<回车>
    输出:
       gfedcba
       (提示: 可以用反向切片,也可以用reversed函数进行反转)




字典 dict
  1. 字典是一种可变的容器, 可以存储任意类型的数据
  2. 字典中的每个数据都是用'键'(key)进行索引的
  3. 字典中的数据没有先后顺序关系,字典的存储是无序的
  4. 字典中数据以键-值(key-value)对形式进行映射存储
  5. 字典的键不能重复,且只能用不可变类型作为字典的键

字典的字面值表示方法:
  用大括号{}括起来,以冒号(:) 分隔键-值对, 各键值对用逗号分开

创建空字典:
  d = {}  
创建非空字典:
  d = {'name': 'tarena', 'age': 15}
  d = {'age': 100}
  d = {'a': [1, 2, 3], 'b': (4, 5, 6)}
  d = {'a': list(range(3)), 'b': {100: '一百'}}

字典的构造函数 dict
  dict() 生成一个空的字典 等同于 {}
  dict(iterable)  用可迭代对象初始化一个字典
  dict(**kwargs)  用关键字传参形式生成一个字典
  例如:
    d = dict()
    d = dict([('name', 'tarena'), ['age', 15]])
    d = dict(name='tarena', age=15)

字典的基本操作:
  字典的键索引
    语法:
      字典[键] 
  示例:
    d = {'a': list(range(3)), 'b': {100: '一百'}}
    print(d['a'])  # [0, 1, 2]

添加和修改字典的键值对
  语法:
    字典[键] = 表达式
  说明:
    键不存在,创建键并绑定键对应的值
    键存在,修改键的绑定关系
  示例:
    d = {}
    d['name'] = 'tarena' 
    d['age'] = 15  # 创建键'age' 值为 15
    d['age'] = 16  # 修改键'age' 重新绑定为16

删除字典元素 用 del语句
  语法:
    del 字典[键]
  例:
    d = {'name': 'tarena', 'age': 30}
    del d['name']  # 删除键'name', 释放值的绑定
    print(d)  

字典的迭代访问:
  字典是可迭代对象,字典只能对键进行迭代访问
  d = {'name': 'tarena', (2002, 1,1): '生日'}
  for k in d:
      print(k)
      print("值:", d[k])  # 取值


字典的 in / not in 运算符
  可以用in 来判断一个键是否存在于字典中,如果存在则返回True,不存在返回False
  not in 与 in 相反
  例:
    d = {1: '一', 5: '五'}
    if 1 in d:
        print('1在 d中')
    if '一' not in d:
        print("'一'不在字典d的键中")

可以用于字典的内建函数
  len(x)  返回字典键值对个数
  max(x)  返回字典键的最大值
  min(x)  返回字典键的最小值
  sum(x)  返回字典中所有键的和
  any(x)  真值测试,只对键进行测试,只要有一个键为真就为真
  all(x)  真值测试,只对键进行测试,所有键为真时才为真

  示例:
    d = {1: '一', 5: '五', 8: '八'}
    len(d)  # 3
    max(d)  # 8
    min(d)  # 1
    sum(d)  # 14
    ...


练习:
  1. 写程序,实现以下要求:
    1) 将如下数据形成字典 seasons
       键      值
        1     '春季有1,2,3月' 
        2     '夏季有4,5,6月' 
        3     '秋季有7,8,9月' 
        4     '冬季有10,11,12月'
    2) 让用户输入一个整数代表这个季度,打印这个季度的信息
    如果用户输入的信息不存在,则提示用户您查找的信息不存在

字典推导式:
  是用可迭代对象生成字典的表达式

  语法:
    {键表达式 : 值表达式 for 变量 in 可迭代对象 [if 真值表达式]}
    注: [] 的内容代表可省略

  示例:
    # 生成一个字典,键为数字 1 ~ 9, 值为键的平方
    d = {x : x ** 2 for x in range(1, 10)}
    d = {1: 1, 2: 4, 3: 9....}

字典推导式练习:
  L = ['tarena', 'xiaoming', 'hello']
  生成如下字典
  d = {'tarena': 6, 'xiaoming': 8, 'hello': 5}
  注: 字典的值为键的长度

字典推导式嵌套:
  语法等同于列表推导式.


字典 VS 列表
  1. 都是可变对象
  2. 索引方式不同,列表用整数索引,字典用键索引
  3. 字典的插入,删除,修改的速度可能会快于列表(重要)
  4. 列表的存储是有序的,字典的存储是无序的

练习:
  1. 输入一段字符串,打印出这个字符串中出现过的字符及出现过的次数

  如:
    输入: abcdabcaba
  打印如下:
    a: 4次
    b: 3次
    d: 1次
    c: 2次
  注:  不要求打印的顺序

   2. 输入任意个学生的姓名,年龄,成绩,每个学生的信息存入字典,然后放入到列表中,每个学生信息需要手动输入:
     如:
       请输入姓名: xiaozhang
       请输入年龄: 20
       请输入成绩: 100
       请输入姓名: xiaoli
       请输入年龄: 18
       请输入成绩: 95
       请输入姓名: <回车> # 直接回车结束输入
    内部存储格式如下:
      [{'name': 'xiaozhang', 'age': 20, 'score':100},
       {'name': 'xiaoli', 'age': 18, 'score':95},
      ]
    先将上述信息存于列表L 中, 然后以表格形式打印如下:
    +---------------+----------+----------+
    |    name       |   age    |   score  |
    +---------------+----------+----------+
    |   xiaozhang   |    20    |   100    |
    |     xiaoli    |    18    |    95    |
    +---------------+----------+----------+



























