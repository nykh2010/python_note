day18 回顾
  封装 enclosure
    私有属性
    　　　self.__属性名  
       私有属性只能被此对象的方法访问
    私有方法
       self.__方法名(形参列表)
  多态:
    动态(python只能实现动态)
    静态
  多继承
  　　标识符冲突
  　　MRO
    类的.__mro__ 属性 (类1, 类2,.. object)
    super(类,对象).dothings(...)
  　　　　
函数重写
　　在类内添加相应的方法，可以实现内建函数的操作
    repr   self.__repr__
    str    self.__str__
    len    self.__len__
    abs
    round
    reversed
    int
    float
    complex
    bool
    next()
    iter()

迭代器
  可以让自定义的类作为可迭代对象提供迭代器

  __iter__(self)   返回迭代器

  __next__(self)   提供数据，同时实现迭代器协议


day19笔记
异常(高级／终级)
  回顾 异常相关的语句有哪儿几个?
     try-except
     try-finally
     raise
     assert 
with 语句
  语法:
     with 表达式1 [as 变量1], 表达式2 [as变量2], ...
  作用:
    用于对资源进行访问的场合，确保使用过程中不管是否发生异常，都会执行必须的清理操作,并释放资源
      如:文件关闭，线程中的锁的自动获取和释放等
  说明:
    执行表达式，用as子句中的变量绑定生成对象
    with语句不会改变异常的状态
  示例:
    with.py
  
环境管理器:
  类内有 __enter__ 和 __exit__ 实例方法的对象 被称为环境管理器
  能用with进行管理的对象必须是环境管理器

  示例见:
    with3.py

运算符重载
  什么是运算符重载
    让自定义的类生成的对象(实例) 能够使用运算符进行操作
  作用:
    让自定义的类的实例像内建对象一样进行运算符操作
    让程序简洁易读
    对自定义对象将运算符赋序新的规则
  说明:
    运算符的重载方法参数已经有固定的含义,不建议改变原有的意义

算术运算符的重载方法:
    方法名               运算符和表达式  说明
 __add__(self, rhs)       self +  rhs 加法
 __sub__(self, rhs)       self -  rhs 减法
 __mul__(self, rhs)       self *  rhs 乘法
 __truediv__(self, rhs)   self /  rhs 除法
 __floordiv__(self, rhs)  self // rhs 地板除
 __mod__(self, rhs)       self %  rhs 加法
 __pow__(self, rhs)       self ** rhs 加法

    rhs (right hand side)
  二元运算符的重载格式:
    def __xxx__(self, other):
         .....
  示例见:
    mynumber.py


练习:
  实现两个自定义列表的相加
    class MyList:
        def __init__(self, iterable):
            self.data = list(iterable)
        ... 以下自己实现

    L1 = MyList([1, 2, 3])
    L2 = MyList([4, 5, 6])
    L3 = L1 + L2
    print(L3)  # MyList([1, 2, 3, 4, 5,6])
    L4 = L2 + L1
    print(L4)  # MyList([4, 5, 6, 1, 2,3])
    L5 = L1 * 2
    print(L5)  # MyList([1,2,3,1,2,3])



反向算术运算符的重载方法:
  当运算符的左侧为内建类型时,右侧为自定义类型进行
  算术运算符的重载时,会出现错误,此时需要使用反向算术运算符的重载

反向算术运算符重载方法
    方法名               运算符和表达式  说明
 __radd_(self, lhs)      lhs +  self 加法
 __rsub_(self, lhs)      lhs -  self 减法
 __rmul_(self, lhs)      lhs *  self 乘法
 __rtruediv_(self, lhs)  lhs /  self 除法
 __rfloordiv_(self, lhs) lhs // self 地板除
 __rmod_(self, lhs)      lhs %  self 加法
 __rpow_(self, lhs)      lhs ** self 加法

示例见:
  code/mylist.py

复合赋值算术运算符的重载
    方法名               运算符和表达式  说明
__iadd__(self, rhs)      self +=  rhs 加法
__isub__(self, rhs)      self -=  rhs 减法
__imul__(self, rhs)      self *=  rhs 乘法
__itruediv__(self, rhs)  self /=  rhs 除法
__ifloordiv__(self, rhs) self //= rhs地板除
__imod__(self, rhs)      self %=  rhs 加法
__ipow__(self, rhs)      self **= rhs 加法

比较运算符的重载
    方法名             运算符和表达式  说明
 __lt__(self, rhs)    self <  rhs  小于
 __le__(self, rhs)    self <= rhs  小于等于
 __gt__(self, rhs)    self >  rhs  大于
 __ge__(self, rhs)    self >= rhs  大于等于
 __eq__(self, rhs)    self == rhs  等于
 __ne__(self, rhs)    self != rhs  不等于

位运算符的重载
    方法名             运算符和表达式  说明
 __and__(self, rhs)     self &  rhs 位与
 __or__(self, rhs)      self |  rhs 位或
 __xor__(self, rhs)     self ^  rhs 位异或
 __lshift__(self, rhs)  self << rhs 左移
 __rshift__(self, rhs)  self >> rhs 右移

反向位运算符重载
 __rand__(self, lhs)     lhs &  self 位与
 __ror__(self, lhs)      lhs |  self 位或
 __rxor__(self, lhs)     lhs ^  self 位异或
 __rlshift__(self, lhs)  lhs << self 左移
 __rrshift__(self, lhs)  lhs >> self 右移

复合赋值运算符的重载
    方法名             运算符和表达式  说明
 __iand__(self, rhs)    self &=  rhs 位与
 __ior__(self, rhs)     self |=  rhs 位或
 __ixor__(self, rhs)    self ^=  rhs 位异或
 __ilshift__(self, rhs) self <<= rhs 左移
 __irshift__(self, rhs) self >>= rhs 右移


一元运算符的重载
    方法名         运算符和表达式  说明
 __neg__(self)      - self       负号
 __pos__(self)      + self       正号
 __invert__(self)   ~ self       取反
语法:
  class 类名:
     def __xxx__(self):
         ....


in / not in 运算符的重载:
    方法名               运算符和表达式  说明
 __contains__(self, e)    e in self e是否在self里
  
索引和切片的运算符的重载
  方法名             运算符和表达式     说明
__getitem__(self, i)    x=self[i] 索引取值
__setitem__(self, i, v) self[i]=v 索引赋值
__delitem__(self, i)   del self[i] 删除索引
示例见:
  mylist5.py

slice 构造函数:
  创建一个切片对象
  slice(start=None, stop=None, step=None)

  slice对象的属性:
   s.start   起始值, 默认为None
   s.stop    终止值, 默认为None
   s.step    步长, 默认为None

特性属性 @property
  实现其它语言中所拥有的getter和 setter的功能

  作用:
    用来模拟一个属性
    通过@property 装饰器可以对模块属性的取值
    和赋值加以控制
  示例见:
    property.py


练习:
  实现有序的集合类 OrderSet() 实现两个集合的交集 & , 并集 |, 补集 -, 对称补集^ ==, != , in, not 运算等操作
  功能和set 类一样
  要求:集合的内部用list存储
    class OrderSet:
        ...   以下自己实现
    s1 = OrderSet([1, 2, 3, 4])
    s2 = OrderSet([3, 4, 5])
    print(s1 & s2)  # OrderSet([3, 4])
    print(s1 | s2)  #OrderSet([1,2,3,4,5])
    print(s1 ^ s2)  #OrderSet([1, 2, 5])
    if OrderSet([1,2,3] != OrderSet(1,2,3,4)):
       print("不相等")
    if s2 == OrderSet([3, 4, 5]):
        print("s3= OrderSet([3, 4, 5")
    if 2 in s1:
        print("2 in s1")

   答案见: orderset.py