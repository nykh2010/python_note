day08回顾:
  容器
    不可变的容器类型:
      str
      tuple

    可变的容器类型
      list(列表)
      dict(字典)
      
    列表[整数索引]   列表[切片]
    字典[键索引]

删除可变类型的数据元素
    del 列表[整数索引]
    del 列表[切片]
    del 字典[键索引]

推导式
  []
  {}
  [x + 1 for x in range(10)]
  {x: x ** 2 for x in range(10)}

深拷贝和浅拷贝



day09笔记:
  集合 set
    集合是可变的容器
    集合内的数据对象都是唯一的(不能重复多次)
    集合是无序的存储结构,集合中的数据没有先后关系
    集合内的元素必须是不可变对象
    集合是可迭代的
    集合是相当于只有键没有值的字典(键则是集合的数据)

创建空的集合:
   set()
创建非空的集合
  {1, 2, 3}

集合的构造函数:
  set() 创建一个空的集合对象(不能用{} 来创建空的集合)
  set(iterable)  用可迭代对象创建一个新的集合对象

  示例:
    s = set()
    s = {2, 4, 6, 8}
    s = set("ABC")  # {'A', 'C', 'B'}
    s = set("ABCCBA")  # {'A', 'C', 'B'}
    s = set({1:'One', 2: 'Two', 5:'five'})  # {1, 2, 5}
    s = set([1, 3.14, "ABC", (1,2,3)])


集合的运算:
  交集 &, 并集 |, 补集 -, 对称补集 ^, 子集 <, 超集 >

& 生成两个集合的交集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 & s2  # s3 = {2, 3}

| 生成两个集合的并集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 | s2  # s3 = {1, 2, 3, 4}

- 生成两个集合的补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 - s2  # s3 = {1}

^ 生成两个集合的对称补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 ^ s2  # s3 = {1, 4}  # 等同于 (s1 -s2) | (s2- s1)


> 判断一个集合是另一个集合的超集
< 判断一个集合是另一个集合的子集
  s1 = {1, 2, 3}
  s2 = {2, 3}
  s1 > s2  # True s1 是s2 的超集
  s2 < s1  # True s2是s1的子集

== !=  集合相同或不同
  s1 = {1, 2, 3}
  s2 = {2, 3, 1}

  s1 == s2  # True
  s1 != s2  # False

in / not in 运算符:
  等同于同字典的in运算符

示例:
  1 in {1, 2, 3}  # True
  100 in {1, 2, 3}  # False

集合和字典的优点:
  in / not in 运算符的运算速度可能会快于列表


集合的基本函数操作:
  len(x)
  max(x)
  min(x)
  sum(x)
  any(x)
  all(x)  
  以上函数可以用于集合中,规则等同于列表的规则

集合是可迭代对象:
  s = {1, 3.14, "ABC", (1,2,3)}
  for e in s:
      print(e)  

集合中常用的方法:
  详见文档:
    python_base_docs_html/set.html

练习:
  经理有: 曹操, 刘备, 孙权
  技术员有: 曹操, 孙权, 张飞, 关羽
  用集合求:
    1. 即是经理也是技术员的有谁?
    2. 是经理,但不是技术人员的有谁?
    3. 是技术人员,不是经理的都有谁?
    4. 张飞是经理吗?
    5. 身兼一职的人都有谁?
    6. 经理和技术员共有几个人?


集合推导式:
  是用可迭代对象创建集合的表达式

语法:
  {表达式 for 变量 in 可迭代对象[if 真值表达式]}
  注:[]里的内容代表可省略

示例:
  names = ['Tom', 'Jerry', 'Spike', 'Tom', 'Jerry', 'Tyke']
  s = {n for n in names}
  print(s)  # {'Tom', 'Jerry', 'Spike', 'Tyke'}

集合推导式嵌套语法同列表推导式(此处略)





固定集合 frozenset
  固定集合是不可变的,无序的,含有唯一元素的集合

作用:
  固定集合可以作为字典的键,还可以作为集合的值

固定集合的构造函数 frozenset
  frozenset()   创建一个空的固定集合
  frozenset(iterable)  用可迭代对象创建一个新的固定集合

示例:
  fz = frozenset()
  fz = frozenset([1, 3, 5, 7, 9])
  fz = frozenset("hello")  # fz = frozenset({'h', 'e', 'l', 'o'})


固定集合的运算与集合完全一致
  & 交集
  | 并集
  - 补集
  ^ 对称补集
  < <= > >= == !=
  in / not in 运算

固定集合的方法:
  相当于集合的全部方法去掉修改集合的方法


小结:
  数据类型:
    不可变的数据类型:
      bool, int, float, complex, str, tuple, frozenset
      bytes(后面会学)
    可变的数据类型:
      list, dict, set, bytearray(后面会学)
  值:
    None, False, True, ...
  运算符:
    + - * / // % **
    < <= > >= == != 
    in / not in 
    not and or
    ~ & | ^ << >>
    +(正号) -(负号)
  表达式
    1
    1 + 2
    sum(range(10)) + sum(range(20))
    条件表达式  x if x > y else y
    三种推导式:
      列表,字典,集合推导式
    全部的字面值:
      '' [] () {}

  语句
    表达式语句:
      print("hello!")
      """abc"""
    赋值语句:
      a = 100
      a = b = c = 200
      x, y = 100, 200
    del 语句
    if 语句
    while 语句
    for 语句
    break 语句
    continue 语句
    pass 语句

内建函数:

  len(x), max(x), min(x), sum(x), any(x), all(x)

  构造函数:
    bool(x), int(x), float(x), complex(x), str(x), list(x), tuple(x), dict(x), set(x), frozenset(x)

  数值函数
    abs(x)
    round(x)
    pow(x, y, z=None)
  字符串相关函数
    bin(x), oct(x), hex(x), chr(x), ord(x)
  迭代相关:
    range(), reversed(), sorted
  输入输出:
    input(x)
    print(...)





函数 function
  函数是可以重复执行的语句块,可以重复调用

  作用:
    1. 用于封装语句块,提高代码的重用性
    2. 定义用户级别的函数

def 语句:
  语法:
    def 函数名(形参列表):
       语句块
说明:
  函数的名字就是语句块的名称
  函数名的命名规则与变量的名的规则相同
  函数名是一个变量(不要轻易对其赋值)
  函数有自己的名字空间,在函数外部不能访问函数内部的变量,在函数内部 可以访问函数外部的变量
    (要让函数处理外部数据需要用参数给函数传入一些数据)
  函数如果不需要传入参数,则参数列表可以为空
  语句部分不能为空,如果为空需要填充 pass 语句

示例见:
  def.py

函数调用
  函数名(实际调用传递参数)
  # 注: 实际调用传递参数简称为实参
  
  说明:
    函数调用是一个表达式
    如果函数内没有return 语句,函数执行完毕后返回None对象的引用

示例见:
  def2.py

return 语句
  语法:
    return [表达式]
      注: []代表可省略
  作用:
    用于函数中,结束当前函数的执行,返回到调用该函数的地方,同时返回一个对象的引用关系
  说明:
    return 语句后跟的表达式可以省略,省略后相当于return None
    如果函数内没有return语句,则函数执行完最后一条语句后返回None(相当于在最后加了一条return None语句)
  示例见:
    return.py

练习:
  写一个函数mymax, 实现返回两个数的最大值:
    如:
      def mymax(a, b):
          ...

    # 以下是调用:
      print(mymax(100, 200))  # 200
      print(mymax("ABC", "123"))  # ABC


python 函数的参数传递
  传递方式:
    1.位置传参
      - 序列传参
    2.关键字传参
      - 字典关键字传参

位置传参
  实际参数(实参)的对应关系与形式参数(形参) 的对应关系是按位置来依次对应的

  示意:
    def mymin(a, b, c):
        pass
    #         ^  ^  ^
    #         |  |  |
    mymin(    1, 2, 3)
  说明:
    实际参数和形式参数通过位置进行传递和匹配
    实参与形参的个数必须相同

示例见:
  positional_give_args.py


序列传参
  序列传参是指在函数调用过程中,用星号(*) 将序列拆解后按位置进行传递的方式

  示例见:
     sequence_give_args.py
  说明:
    序列传参,序列拆解的位置将与形参一一对应
    序列的位置信息对应相应的参数位置


练习:
  1. 写一个函数myadd, 实现给出两个数,返回这两个数的和
  如:
    def myadd(x, y):
        ... # 此处自己实现
    a = int(input("请输入第一个数"))
    b = int(input("请输入第二个数"))
    print("您输入的两个数的和是:", myadd(a, b))

  2. 写一个函数 input_number
    def input_number():
        ... # 此处自己实现
    此函数用来获取用户循环输入的整数,当用户输入负数时结束输入
    将用户输入的数字以列表的形式返回,再用内建函数max,min, sum求出用户输入的最大值,最小值及 和
      L = input_number()
      print(L)  # 打印此列表
      print("用户输入的最大数是:", max(L))
      print("用户输入的最小数是:", min(L))
      print("用户输入的和是:", sum(L))


关键字传参:
  关键字传参是指传参时,按着形参的名称给形参赋值
  实参和形参按名称进行匹配,可以不按位置进行匹配

示例见:
  keywords_give_args.py


字典关键字传参:
  是指实参为字典,将字典用 双星号(**)拆解后进行关键字传参的传参方式

  说明:
    字典的键名和形参名必须一致
    字典的键名必须为字符串
    字典的键要在形参中存在 

  示例见:
    dict_keywords_give_args.py

函数的综合传参:
  函数的传参方式,在能确定形参能唯一匹配到相应实参的情况下可以任意组合
  函数的位置传参要先于关键字传参

  示例:
    def myfun1(a, b, c):
        pass
    myfun1(100, *[200, 300])
    myfun1(*(100, 200), 300)
    myfun1(100, c=300, b=200)
    myfun1(*'AB', 'C')
    myfun1(100, **{'c':300, 'b': 200})
    myfun1(**{'b': 200, 'c':300}, a=100)
    # 以下是错误的    
    myfun1(**{'b': 200, 'c':300}, 100)
    myfun1(b=2, c=3, 1)


练习:
  1. 定义两个函数:L
     sum3(a, b, c)  用于返回三个数的和
     pow(x) 用于返回x的三次方(立方)

    用以上函数计算:
      1) 计算  1的立方 + 2 的立方 + 3的立方
      2) 计算 1 + 2 + 3的和的立方

  2. 写一个函数isprimes(x) 判断x是否为素数,如果是素数返回True,否则返回False

  3. 写一个函数 prime_m2n(m, n) 返回从 m开始到n结束范围内的素数,返回这些素数的列表,并打印这些素数
    如:
      L = prime_m2n(10, 20)
      print(L)   [11, 13, 17, 19]

  4. 写一个函数primes(n)  返回指定范围内n的素数(包含n)的列表,并打印这些素数
    L = primes(10)
    print(L)  # [2, 3, 5, 7]
      1) 打印100以内的全部素数
      2) 打印200以内的全部素数

  5. 改写之前的学生信息管理程序.
    1) 编写函数 input_student() 获取学生信息,以学生姓名为空结束,返回学生信息的列表(列表里是字典)
      (学生信息依旧是: 姓名,年龄,成绩)

    2) 编写函数 output_student(L) 以表格形式打印学生信息

    如:
      def input_student():
          ...
      def output_student(lst):
          ...
      L = input_student()  
      print(L)  # 打印学生的信息的列表
      output_student(L)  以列表形式打印学生信息


