day17回顾:
面向对象
  用类来封装或描述

  class 类名(继承列表):
      实例方法
      类方法
      静态方法
      def __init__(self, ...):
          ...
      def __del__(self):
          ...
对象1 = 类名()
对象1.实例方法名(实例方法的传参)

实例变量（实例属性)
对象1.实例属性名 = 表达式  # 创建属性


类方法:
   class 类名(继承列表):
        @classmethod
        def 类方法名(cls, ....):
            pass
类变量
    class 类名(继承列表):
         类变量名 = 表达式

预置的类变量:
  __docs__ 绑定文档字符串
  __base__ 绑定当前类的父类

__slots__列表
  作用:
    让此类创建的对象只能有固定的实例属性
  class Student:
     __slots__ = ['name', 'age']
     def __init__(self, n, a):
         self.name, self.age = n, a



静态方法 @staticmethod
    class A:
   　　　 　@staticmethod
        def add(x, y):
           return x + y

继承／派生
  语法:
    class 子类名(父类名或基类):
         pass
单继承

覆盖　override
  class A:
      def m():
         passs
  class B(A):
      def m():
         pass
b = B()
b.m()  # 调用B的覆盖版本的m()

一但出现覆盖，子类无法调用同名的父类的方法
  super(类名, 对象名).方法名()
  super().方法名()

函数:
  issubclass(类，类或类的元组) 用于判断继承关系


day18笔记:
  封装 enclosure
    封装是指隐藏类的实现细节，让使用者不关心这些细节
    封装的目的是让使用者通过尽可能少的属性和方法操作对象
    python的封装是假的(模拟的封装)

  私有属性和方法
    python类中以双下划线'__'开头，不以双下划线结尾的标识符为私有成员，私有成员只能使用方法来进行访问和修改
  示例见:
    enclosure.py



多态 polymorphic
  什么是多态:
    多种状态
    多态是指在有继承/派生关系的类中。调用基类对象的方法，实际能调用子类覆盖版本的现象叫多态

  状态:
    静态(编译时状态)
    动态(运行时状态)
  说明:
    python的全部对象只有"运行时状态(动态)" 没有C++的语言里的"编译时状态(静态)"
  示例见：poly.py


面向对象的编程语言的特征
  封装
  继承
  多态



多继承 multiple inheritance
  多继承是指一个子类继承自两个或两个以上的父类

  语法:
    class 子类名(基类名1, 基类名2, ....):
        ...
  说明:
    一个子类同时继承自多个父类，父类中的方法可以同时被继承下来
    如果两个父类中有同名的方法，而在子类中又没有覆盖此方法，调用结果难以确定
  
多继承的问题(缺陷):
  标识符冲突问题
    要谨慎使用多继承

  示例见:
    multi_inherit2.py

多继承的MRO(Method Resolution Order)问题
  类的__mro__属性
    用来记录类的方法的查找顺序

钻石继承
     
      A
     / \
    B   C
     \ /
      D


函数重写
  什么是函数重写:
    在自定义的类内添加相应的方法，让自定义的类创建的对象能像内建对象一样进行内建函数操作


对象转字符串函数:
  repr(x)  返回一个附合python语法规则且能代表此
           对象的表达式的字符串,通常:
               eval(repr(obj)) == obj
  str(x)   用给定的对象x返回一个字符串(这个字符串通
           常是给人阅读的)

  如:
    s = "I'm Student"
    s1 = repr(s)  # s1 绑定能代表s的表达式
    print(s1)
    s2 = str(x)  # s2 返回s的内容
    print(s2)

对象转字符串函数重写方法:
  repr() 函数的重写方法:
      def __repr__(self):
          return 字符串
  str() 函数的重写方法:
      def __str__(self):
          return "字符串"

示例见:
  mynumber.py

  说明:
    str(obj) 函数调用方法说明:
      1. str(obj) 函数先查找obj.__str__()方法,调用
         此方法并返回结果
      2. 如果没有obj.__str__()方法,则调用obj.__repr__方法并返回结果
      3. 如果obj.__repr__方法不存在，则调用object类的__repr__实例方法显示<__main__.MyNumber object at 0xXXXXXXXX> 格式的字符串


内建函数的重写
  __abs__      abs(obj)  函数调用
  __len__      len(obj)  函数调用
  __round__    round(obj)  函数调用
  __reversed__ reversed(obj)  函数调用

示例见:
  len_overwrite.py



数值传换函数的重写
   __complex__    complex(obj)  函数调用
   __int__        int(obj)  函数调用
   __float__      float(obj) 函数调用
   __bool__       bool(obj)  函数调用

示例见:
  mynumber3.py

布尔测试bool(obj) 函数的重写
    格式:
      def __bool__(self):
         return 真或假
    作用:
      用于bool(obj) 函数取值
      用于if语句的真值表达式中
      用于while语句真值表达式中
    说明:
      1. 当自定义的类的__bool__(self) 方法时，以此方法返回值作用bool(x) 的返回值
      2. 当不存在__bool__方法时，bool(x) 返回__len__(self) 方法的返回值判断是否为零来测试布尔值
      3. 当不存在__len__(self) 方法时，返回True

示例见:
  bool.py

迭代器(高级)

  什么是迭代器?
    可以通过next函数取值的对象就是迭代器
  迭代器协议:
    迭代器协议是指对象能够使用next函数获取下一项数据，在没有下一项数据时触发一个StopIteration异常来终止迭代的约定
  迭代器协议实现方法:
    在类内需要用__next__(self) 方法来实现迭代器

什么是可迭代对象:
  是指能用iter(obj) 函数返回迭代器的对象(实例)
  可迭代对象内部要求定义__iter__(self) 方法来返回迭代器对象

示例见:
  mylist.py


练习:
  1. 修改之前的学生信息管理系统，实现封装，把
    Student类内的name,age,score 实例变量变为私有实例变量，不让除此对象的之外的方法访问
　　2.  写一个类 Fibonacci 实现迭代器协议，此类的对象可以用为可迭代对象生成相应的斐波那契数,即
      1 1 2 3 5 8 13...
    类定义如下:
        class Fibonacci:
            def __init__(self, n):
                ....
      实现如下操作:
        for x in Fibonacci(10):
            print(x)  # 1 1 2 3 5 8 13 ...
