day02回顾
1、数据类型
  1、数值类型
	2、字符类型
	3、枚举类型
	  1、字段名 enum(值1,值2)
		2、likes set("girl","Study","Python")
		  insert into t1(likes) values("girl,Python")
	4、日期时间类型
	  1、date
		2、time
		3、datetime   ：不给值默认返回NULL
		4、timestamp  ：不给值默认返回系统当前时间
2、表字段操作
  1、添加(add)
	  alter table 表名 字段名 数据类型 first | after 字段名;
  2、删除(drop)
	  alter table 表名 drop 字段名;
  3、修改(modify)
	  alter table 表名 modify 字段名 新数据类型;
  4、表重命名(rename)
	  alter table 表名 rename 新表名;
  5、表字段重命名(change)
	  alter table 表名 change 旧字段名 新名 数据类型;
3、表记录管理
  1、删除(delete)
	  delete from 表名 where 条件;
	2、修改(update)
	  update 表名 set 字段名=值1,字段名=值2 where 条件;
4、运算符
  1、数值&&字符&&逻辑比较
	  1、数值 ：> >= < <= = !=
		2、字符 ：= !=
		3、逻辑比较 ：and  or
  2、范围内比较
	  1、字段名 in(值1,值2)
		2、字段名 not in(..,..)
		3、between 值1 and 值2
  3、空、非空
	  1、where 字段名 is null
		2、is not null
	4、模糊比较(like)
	  where 字段名 like "_%"
5、SQL查询
  1、order by 
	  order by 字段名 ASC/DESC;
	2、limit
	  1、limit n
		2、limit m,n
*****************************
day03笔记
1、SQL查询
  1、limit
	  1、分页
		  每页显示5条记录,显示第4页的内容
			limit m,n
			limit 15,5
			每页显示m条记录,显示第n页的内容
			limit (n-1)*m,m
2、日期时间函数
  1、NOW() : 当前时间
	2、curdate() : 当前日期
	3、curtime() 
	
	4、year("充值时间") : 提取年份
	5、date("充值时间") : 提取日期
	6、time("充值时间") : 提取时间
  7、示例
	  1、查询2018年8月30日用户充值信息
		  select * from t520 where  date(cztime)="2018-08-30";
		2、查询2018年11月份用户充值信息
      select * from t520 where date(cztime)>="2018-11-01" and date(cztime)<="2018-11-30";
		3、查询2018年11月4日10:00-12:00用户充值信息
		  select * from t520 where cztime>="2018-11-04 10:00:00" and cztime<="2018-11-04 12:00:00";
      
			select * from t520 where date(cztime)="2018-11-04" and time(cztime)>="10:00:00" and time(cztime)<="12:00:00";
3、日期时间运算
  1、语法格式
	  select * from 表名 where
		字段名 运算符(now()-interval 时间间隔单位);
		时间间隔单位：
		  1 day | 3 day | 1 minute | 2 year | 3 month
	2、示例
	  1、查询1天以内的充值记录
      select * from t520 where cztime > (now()-interval 1 day);
		2、查询1年以前的充值记录
		  select * from t520 where cztime < (now()-interval 1 year);
		3、查询1天以前,3天以内的充值记录(and)
		  select * from t520 where 
			cztime <= (now()-interval 1 day) and
			cztime >= (now()-interval 3 day);
4、SQL查询(续)
  1、聚合函数
	  1、分类
		  avg(字段名)
			sum(字段名)
			max(字段名)
			min(字段名)
			count(字段名) : 统计该字段记录的个数
		2、示例
		  1、攻击力最强值是多少？
			  select max(gongji) from sanguo;
			2、统计id,name两个字段有多少条记录?
        select count(id),count(name) from sanguo;
				## 空值NULL不会被统计,""会被统计
		  3、统计蜀国英雄中攻击值>200的英雄的数量
        select count(id) from sanguo where country="蜀国" and gongji>200;
	2、group by ：给查询的结果进行分组
	  1、示例
		  1、计算每个国家的平均攻击力是多少？
        select country,avg(gongji) from sanguo group by country;  
       先分组    再聚合   再去重
        蜀国
				蜀国
				蜀国      100      蜀国
				魏国
				魏国      200      魏国
				吴国      300      吴国
		  2、查找所有国家的英雄中,英雄数量最多的前2名,显示国家名称和英雄数量
			  select country,count(id) from sanguo
				group by country
				order by count(id) DESC
				limit 2;
		2、注意
		  select后的字段名如果没有在group by之后出现,则必须对该字段进行聚合处理(聚合函数)
	3、having ：对分组聚合后的结果,进行进一步筛选
	  1、示例
		  1、找出平均攻击力>105的国家的前2名,显示国家名称、平均攻击力
			  select country,avg(gongji) as pj from sanguo
        group by country
				having pj>105
				order by pj DESC
				limit 2;
	  2、注意
		  1、having语句通常和group by语句联合使用
			2、having语句的存在弥补了where关键字不能与聚合函数联合使用的不足,where只能操作表中实际存在的字段,having可操作聚合函数生成的显示列
  4、distinct ：不显示字段的重复值
	  1、示例
		  1、表中都有哪些国家
			  select distinct country from sanguo;
			2、select distinct country,name,id from sanguo;
		2、注意
		  1、distinct和from之间所有字段都相同才会去重
			2、distinct不能对任何字段做聚合处理
  5、查询表记录时可以做数学运算
	  1、运算符 ：+ - * / %
		2、示例
		  1、查询时所有英雄攻击力翻倍
			  select name,gongji*2 as xgj from sanguo;
5、SQL嵌套查询(子查询)
  1、定义 ：把内层的查询结果作为外层的查询条件
	2、语法格式
	  select ... from 表名 where 字段名 运算符(select ...);
		                           score > (select ...)
															 country in(select ...)
						 where (id,country) in(select id,country)
	3、示例
	  1、把攻击值小于平均攻击值的名字、攻击值显示出来
			select name,country from sanguo where gongji<(select avg(gongji) from sanguo);
		2、找出每个国家中,攻击力最高的英雄的名字和攻击值
       1、写架子
			 2、where gongji in(每个国家的攻击力最强值)
       # 有BUG
			   select name,gongji from sanguo where
			   gongji in(select max(gongji) from sanguo group by country);
			 # 无BUG
			   select name,gongji from sanguo where
			   (country,gongji) in
			   (select country,max(gongji) from sanguo group by country);
6、多表查询
  1、两种方式
	  1、select 字段名1,字段名2 from 表1,表2;(笛卡尔积)
		2、... where 条件;
	2、示例
	  1、显示省、市详细信息
      select sheng.s_name,city.c_name from sheng,city where sheng.s_id=city.cfather_id;
		2、显示省、市、县详细信息
      select sheng.s_name,city.c_name,xian.x_name from sheng,city,xian  where sheng.s_id=city.cfather_id and city.c_id=xian.xfather_id;
7、连接查询
  1、内连接(只显示匹配成功的结果)
    1、语法格式
		  select ... from 表1 inner join 表2 on 条件;
		2、示例
		  1、显示省、市详细信息
			  select sheng.s_name,city.c_name from sheng
				inner join city
				on sheng.s_id=city.cfather_id;
      2、显示省、市、县详细信息
			  select sheng.s_name,city.c_name,xian.x_name from sheng
        inner join city
        on sheng.s_id=city.cfather_id
        inner join xian
        on city.c_id=xian.xfather_id;
	2、外连接
	  1、左连接
      1、以左表为主显示查询结果
			2、语法格式
			  select ... from 表1 left join 表2 on 条件;
			3、示例
			  1、显示省、市详细信息,要求省全都显示
				  select sheng.s_name,city.c_name from sheng
          left join city
          on sheng.s_id=city.cfather_id;
        2、显示省、市、县详细信息,要求市全都显示
				  select sheng.s_name,city.c_name,xian.x_name from sheng
          right join city 
          on sheng.s_id=city.cfather_id
          left join xian
          on city.c_id=xian.xfather_id;
		2、右连接(right join)
		  用法同左连接
8、约束
  1、作用 ：保证数据的完整性、一致性、有效性
	2、约束分类
	  1、非空约束(not null)
      1、不允许该字段值为NULL
		2、默认约束(default 值)
		  1、插入记录时,不给值,则使用默认值
			  sex enum("M","F","S") default "S"
9、索引
  1、定义
	  对数据库表的一列或者多列进行排序的一种结构(BTREE)
	2、优点
	  加快数据的检索速度
	3、缺点
	  1、占用物理存储空间
		2、当对表中数据进行更新时,索引需要动态维护,占用系统资源,降低数据维护速度
  4、索引示例
	  1、开启运行时间检测 ：set profiling=1;
		2、执行查询语句
		  select name from t1 where name="lucy88888";
		3、在name字段创建索引
		  create index name on t1(name);
		4、执行查询语句
		  select name from t1 where name="lucy99999";
		5、查看执行时间
		  show profiles;

sudo apt-get install python3-pip
sudo pip3 install pymysql
解压后：pymysql-0.9
cd pymysql-0.9
sudo python3 setup.py install

3、select ...聚合函数 from ...
1、where ...
2、group by ...
4、having ...
5、order by ...
6、limit ...

